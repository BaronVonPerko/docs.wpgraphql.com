{"version":3,"sources":["webpack:///path---getting-started-about-b6fcfae119dadb8a7844.js","webpack:///./.cache/json/getting-started-about.json"],"names":["webpackJsonp","724","module","exports","data","markdownRemark","html","frontmatter","path","title","pathContext","nav","getting-started","name","type","children","about","description","install-and-activate","contributing","community-and-support","tutorials","add-fields-to-schema","custom-post-types-and-taxonomies","exploring-graphql","override-field-resolvers","testing-extensions","testing","graphql-in-php","recipes","comments","options","plugins","posts","terms","themes","users","reference","actions-filters","auth","deferred-resolvers","extensions","tooling","types-schema","unit-tests","faq","client","extending","schema","node","fileAbsolutePath","id","shortExcerpt","excerpt","timeToRead","next","previous"],"mappings":"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","file":"path---getting-started-about-b6fcfae119dadb8a7844.js","sourcesContent":["webpackJsonp([201535673162239],{\n\n/***/ 724:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p><img src=\\\"https://www.wpgraphql.com/wp-content/uploads/2017/06/wpgraphql-logo-e1502819081849.png\\\" alt=\\\"Logo\\\"></p>\\n<p>WPGraphQL - A free, open-source WordPress plugin that provides an extendable GraphQL schema and API for any WordPress site.</p>\\n<p>You are currently viewing the WPGraphQL docs and reference, where you can read about major concepts, dive into technical details or follow practical examples to learn how WPGraphQL works.</p>\\n<p><a href=\\\"https://www.wpgraphql.com\\\" target=\\\"_blank\\\">Website</a> • <a href=\\\"https://wp-graphql.github.io/wp-graphql-api-docs/\\\" target=\\\"_blank\\\">ApiGen Code Docs</a> • <a href=\\\"https://wpgql-slack.herokuapp.com/\\\" target=\\\"_blank\\\">Slack</a></p>\\n<p><a href=\\\"https://travis-ci.org/wp-graphql/wp-graphql\\\"><img src=\\\"https://travis-ci.org/wp-graphql/wp-graphql.svg?branch=master\\\" alt=\\\"Build Status\\\"></a>\\n<a href=\\\"https://coveralls.io/github/wp-graphql/wp-graphql?branch=master\\\"><img src=\\\"https://coveralls.io/repos/github/wp-graphql/wp-graphql/badge.svg?branch=master\\\" alt=\\\"Coverage Status\\\"></a></p>\\n<hr>\\n<blockquote>\\n<p><strong>Warning:</strong>\\nUntil WPGraphQL hits a <a href=\\\"contributing.md\\\">1.0.0 release</a>, it is still considered beta software. This doesn’t mean that the plugin isn’t ready for use, it just means that there <em>might</em> still be <a href=\\\"https://github.com/wp-graphql/wp-graphql\\\">bugs</a> and that there <em>might</em> be breaking changes to the shape of the API or internal functions as we work toward a stable release. </p>\\n<p>Don’t hesitate to start using the plugin, but just be sure to follow along with <a href=\\\"https://github.com/wp-graphql/wp-graphql/releases\\\">releases</a>\\nand keep up to date with conversations in <a href=\\\"https://wpgraphql.com/community\\\">Slack (join here)</a> </p>\\n<p>WPGraphQL is already in use in production on several sites, including <a href=\\\"https://work.qz.com\\\">work.qz.com</a>, <a href=\\\"http://hopelabs.org\\\">hopelabs.org</a> and more.</p>\\n</blockquote>\\n<h1 id=\\\"what-is-wpgraphql\\\"><a href=\\\"#what-is-wpgraphql\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>What is WPGraphQL?</h1>\\n<p>WPGraphQL is A free, open-source WordPress plugin that provides an extendable <a href=\\\"http://graphql.org\\\">GraphQL</a> GraphQL Schema and API for any WordPress site.</p>\\n<p>WPGraphQL provides a GraphQL API and <code>/graphql</code> endpoint for your WordPress site, allowing for interaction with WordPress data using <a href=\\\"http://graphql.org/learn/queries/\\\">GraphQL Queries and Mutations</a>.</p>\\n<h2 id=\\\"what-is-graphql\\\"><a href=\\\"#what-is-graphql\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>What is GraphQL?</h2>\\n<p>GraphQL is an open source technical specification, developed and maintained by Facebook, for an application level query language. </p>\\n<p>What does that mean? Basically GraphQL provides a consistent way to make declarative queries, which will enable you to more easily retrieve the data you want, and the shape that you want it in. </p>\\n<p>GraphQL can be implemented in any language and can cover a vast amount of use cases. </p>\\n<p>WPGraphQL exposes a WordPress installation’s data through a GraphQL API. You can send a GraphQL request over HTTP to the <code>/graphql</code> endpoint provided by the plugin and in response you will get the matching JSON representation of your data.</p>\\n<p>!!! note “Use WPGraphQL without HTTP requests”\\nYou can also use GraphQL Queries and Mutations from within WordPress PHP without the need for HTTP network requests. <a href=\\\"tutorials/use-graphql-in-php-without-http-request.md\\\">Learn more</a></p>\\n<h2 id=\\\"why-use-wpgraphql\\\"><a href=\\\"#why-use-wpgraphql\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Why use WPGraphQL?</h2>\\n<p>WPGraphQL is arguably the easiest <em>and</em> most efficient way to interact with WordPress data.</p>\\n<p>GraphQL enables small, efficient responses by only retrieving and returning exactly what was asked for, and nothing more.</p>\\n<p>WPGraphQL helps reduce:</p>\\n<ul>\\n<li><strong>HTTP Requests:</strong> Multiple resources can be fetched in a single request</li>\\n<li><strong>Response size:</strong> Only the fields asked for are returned minimizing the payload downloaded by the client</li>\\n<li><strong>Endpoint Bloat:</strong> GraphQL provides a single endpoint and allows clients to ask for what they want from the single source. No need to memorize and maintain various feature endpoints.</li>\\n<li><strong>External Documentation:</strong> GraphQL is self-documenting, reducing the time and resources needed for maintaining API documentation</li>\\n<li><strong>Total SQL queries:</strong> GraphQL queries can ask for multiple resources, or nested resources in a single request allowing GraphQL to determine the most efficient way to get the data from the database with as few SQL queries as possible.</li>\\n<li><strong>Code Duplication:</strong> Because GraphQL exposes all server capabilities in a single Schema, there’s no need to duplicate code for various endpoints. The client can control the shape of their model without specific feature endpoint, which typically requires duplicate server code.</li>\\n<li><strong>Over/Under Fetching:</strong> With REST, you are constantly over and under-fetching at the same time. Endpoints typically have more data than you need, and not enough requiring round-trips to get other resources. GraphQL returns exactly what was asked for and can handle connections in a single request.</li>\\n</ul>\\n<p>WPGraphQL helps improve:</p>\\n<ul>\\n<li><strong>Performance:</strong> WPGraphQL utilizies existing WordPress Core APIs, such as WP_Query, so caching and filters are respected, but WPGraphQL also makes use of deferred resolvers and some look-ahead techniques (as all fields are known in the request before execution begins), allowing for data to be fetched and returned with as few SQL queries as possible. </li>\\n<li><strong>Developer Happiness:</strong> The strong-type system and explicit nature of GraphQL requests makes it easy for developers to understand GraphQL query and mutation requests long after code is written. Additionally, code duplication is drastically reduced as the API is defined in one spot, not in feature endpoints.</li>\\n<li><strong>Versioning:</strong> REST APIs and other APIs can be difficult to version. GraphQL makes <a href=\\\"http://graphql.org/#without-versions\\\">evolving the API</a> much easier than how other APIs are versioned. </li>\\n<li><strong>Client/Server Decoupling:</strong> Since the GraphQL server describes the capabilities and the client defines the shape of the model, the coupling between client and server is loosened. Clients can iterate their models without custom endpoints needing to be created or updated.</li>\\n</ul>\\n<h2 id=\\\"how-does-wpgraphql-work\\\"><a href=\\\"#how-does-wpgraphql-work\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>How does WPGraphQL Work?</h2>\\n<p>WPGraphQL adds a <code>/graphql</code> endpoint to your WordPress install. </p>\\n<p>When HTTP requests are made to that endpoint, WPGraphQL executes the GraphQL request. </p>\\n<p>!!! note “Use WPGraphQL without HTTP requests”\\nYou can also use GraphQL Queries and Mutations from within WordPress PHP without the need for HTTP network requests. <a href=\\\"tutorials/use-graphql-in-php-without-http-request.md\\\">Learn more</a></p>\\n<p>The first part of the execution process, is validating the Query. Since GraphQL is centered around a strong typed Schema, before any real execution begins GraphQL can compare the request against the Schema to make sure the request is even valid. </p>\\n<p>If it’s invalid, no execution occurs, errors are returned right away. </p>\\n<p>If the request is valid, GraphQL breaks down the fields and resolves them as a tree, passing the resolved data down to the next fields in the tree. </p>\\n<p>Take this query for example: </p>\\n{\\n  post(id:\\\"...\\\") {\\n     id\\n     title\\n     customField\\n  }\\n}\\n<p>Behind the Scenes, GraphQL uses native WordPress Core functions to resolve the post by it’s ID. </p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code>\\\\<span class=\\\"token package\\\">WP_Post</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token function\\\">get_instance</span><span class=\\\"token punctuation\\\">(</span> <span class=\\\"token variable\\\">$id</span> <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>Then, GraphQL passes the Post down to the fields to be resolved. The fields use the Post as context to resolve the <code>id</code>, <code>title</code>, and <code>customField</code>. </p>\\n<p>Once all fields are resolved, GraphQL returns the response in JSON format. </p>\",\"frontmatter\":{\"path\":\"getting-started/about\",\"title\":\"About\"}}},\"pathContext\":{\"path\":\"getting-started/about\",\"nav\":{\"getting-started\":{\"title\":\"Getting-started\",\"name\":\"getting-started\",\"type\":\"directory\",\"path\":\"/getting-started/about\",\"children\":{\"about\":{\"title\":\"About\",\"name\":\"about\",\"type\":\"page\",\"path\":\"/getting-started/about\",\"description\":\"Learn about the WPGraphQL Plugin and how to uses this site\",\"children\":{}},\"install-and-activate\":{\"title\":\"Install and activate\",\"name\":\"install-and-activate\",\"type\":\"page\",\"path\":\"/getting-started/install-and-activate\",\"description\":\"Details on installing and activating the WPGraphQL WordPress plugin\",\"children\":{}},\"contributing\":{\"title\":\"Contributing\",\"name\":\"contributing\",\"type\":\"page\",\"path\":\"/getting-started/contributing\",\"description\":\"Information about contributing to WPGraphQL\",\"children\":{}},\"community-and-support\":{\"title\":\"Community and Support\",\"name\":\"community-and-support\",\"type\":\"page\",\"path\":\"/getting-started/community-and-support\",\"description\":\"Where to find WPGraphQL out in the wild, and how to get support\",\"children\":{}}}},\"tutorials\":{\"title\":\"Tutorials\",\"name\":\"tutorials\",\"type\":\"directory\",\"path\":\"/tutorials/add-fields-to-schema\",\"children\":{\"add-fields-to-schema\":{\"title\":\"Adding fields to the Schema\",\"name\":\"add-fields-to-schema\",\"type\":\"page\",\"path\":\"/tutorials/add-fields-to-schema\",\"description\":\"Learn how to hook into the WPGraphQL Schema to add fields for your custom needs.\",\"children\":{}},\"custom-post-types-and-taxonomies\":{\"title\":\"Custom Post Types and Taxonomies\",\"name\":\"custom-post-types-and-taxonomies\",\"type\":\"page\",\"path\":\"/tutorials/custom-post-types-and-taxonomies\",\"description\":\"Learn how to add Custom Post Types and Custom Taxonomies to WPGraphQL\",\"children\":{}},\"exploring-graphql\":{\"title\":\"Exploring WPGraphQL\",\"name\":\"exploring-graphql\",\"type\":\"page\",\"path\":\"/tutorials/exploring-graphql\",\"description\":\"Using tools such as GraphiQL to explore the capabilities of WPGraphQL\",\"children\":{}},\"override-field-resolvers\":{\"title\":\"Override Field Resolvers\",\"name\":\"override-field-resolvers\",\"type\":\"page\",\"path\":\"/tutorials/override-field-resolvers\",\"description\":\"Learn how to override existing field resolvers to resolve custom data\",\"children\":{}},\"testing-extensions\":{\"title\":\"Testing Extensions\",\"name\":\"testing-extensions\",\"type\":\"page\",\"path\":\"/tutorials/testing-extensions\",\"description\":\"Learn how to write unit tests for code that extends WPGraphQL\",\"children\":{}},\"testing\":{\"title\":\"Testing WPGraphQL\",\"name\":\"testing\",\"type\":\"page\",\"path\":\"/tutorials/testing\",\"description\":\"Learn how to write, run and contribute to unit and integration tests for WPGraphQL\",\"children\":{}},\"graphql-in-php\":{\"title\":\"Using GraphQL in PHP\",\"name\":\"graphql-in-php\",\"type\":\"page\",\"path\":\"/tutorials/graphql-in-php\",\"description\":\"Learn how to use GraphQL queries and mutations in WordPress theme and plugin code without remote HTTP requests\",\"children\":{}}}},\"recipes\":{\"title\":\"Recipes\",\"name\":\"recipes\",\"type\":\"directory\",\"path\":\"/recipes/comments\",\"children\":{\"comments\":{\"title\":\"Comments\",\"name\":\"comments\",\"type\":\"page\",\"path\":\"/recipes/comments\",\"description\":\"Recipes for interacting with WordPress comments using WPGraphQL\",\"children\":{}},\"options\":{\"title\":\"Options\",\"name\":\"options\",\"type\":\"page\",\"path\":\"/recipes/options\",\"description\":\"Recipes for interacting with WordPress options using WPGraphQL\",\"children\":{}},\"plugins\":{\"title\":\"Plugins\",\"name\":\"plugins\",\"type\":\"page\",\"path\":\"/recipes/plugins\",\"description\":\"Recipes for interacting with WordPress Plugins using WPGraphQL\",\"children\":{}},\"posts\":{\"title\":\"Posts\",\"name\":\"posts\",\"type\":\"page\",\"path\":\"/recipes/posts\",\"description\":\"Recipes for interacting with WordPress posts (and supported custom post types) using WPGraphQL\",\"children\":{}},\"terms\":{\"title\":\"Terms\",\"name\":\"terms\",\"type\":\"page\",\"path\":\"/recipes/terms\",\"description\":\"Recipes for interacting with Categories, Tags (and terms of other supported taxonomies) using WPGraphQL\",\"children\":{}},\"themes\":{\"title\":\"Themes\",\"name\":\"themes\",\"type\":\"page\",\"path\":\"/recipes/themes\",\"description\":\"Recipes for interacting with Themes using WPGraphQL\",\"children\":{}},\"users\":{\"title\":\"Users\",\"name\":\"users\",\"type\":\"page\",\"path\":\"/recipes/users\",\"description\":\"Recipes for interacting with WordPress Users using WPGraphQL\",\"children\":{}}}},\"reference\":{\"title\":\"Reference\",\"name\":\"reference\",\"type\":\"directory\",\"path\":\"/reference/actions-filters\",\"children\":{\"actions-filters\":{\"title\":\"Actions & Filters\",\"name\":\"actions-filters\",\"type\":\"page\",\"path\":\"/reference/actions-filters\",\"description\":\"Action & Filter reference for the WPGraphQL Plugin\",\"children\":{}},\"auth\":{\"title\":\"Auth\",\"name\":\"auth\",\"type\":\"page\",\"path\":\"/reference/auth\",\"description\":\"Understand how WPGraphQL deals with Authorization and Authentication\",\"children\":{}},\"deferred-resolvers\":{\"title\":\"Deferred Resolvers\",\"name\":\"deferred-resolvers\",\"type\":\"page\",\"path\":\"/reference/deferred-resolvers\",\"description\":\"Understand how GraphQL utilizes Deferred resolvers to efficiently fetch and resolve data\",\"children\":{}},\"extensions\":{\"title\":\"Extensions\",\"name\":\"extensions\",\"type\":\"page\",\"path\":\"/reference/extensions\",\"description\":\"Learn about WPGraphQL extensions from the community\",\"children\":{}},\"tooling\":{\"title\":\"Tooling\",\"name\":\"tooling\",\"type\":\"page\",\"path\":\"/reference/tooling\",\"description\":\"Learn about tooling for working with GraphQL in general (and WPGraphQL specifically)\",\"children\":{}},\"types-schema\":{\"title\":\"Types and Schema\",\"name\":\"types-schema\",\"type\":\"page\",\"path\":\"/reference/types-schema\",\"description\":\"Learn more about how GraphQL Types and Schema work\",\"children\":{}},\"unit-tests\":{\"title\":\"Unit Tests\",\"name\":\"unit-tests\",\"type\":\"page\",\"path\":\"/reference/unit-tests\",\"description\":\"Learn more about how WPGraphQL unit tests are setup\",\"children\":{}}}},\"faq\":{\"title\":\"Faq\",\"name\":\"faq\",\"type\":\"directory\",\"path\":\"/faq/client\",\"children\":{\"client\":{\"title\":\"Client FAQ\",\"name\":\"client\",\"type\":\"page\",\"path\":\"/faq/client\",\"description\":\"Frequently asked questions about using WPGraphQL in the client\",\"children\":{}},\"contributing\":{\"title\":\"Contributing\",\"name\":\"contributing\",\"type\":\"page\",\"path\":\"/faq/contributing\",\"description\":\"Frequently asked questions about contributing to WPGraphQL\",\"children\":{}},\"extending\":{\"title\":\"Extending\",\"name\":\"extending\",\"type\":\"page\",\"path\":\"/faq/extending\",\"description\":\"Frequently asked questions about extending WPGraphQL\",\"children\":{}},\"faq\":{\"title\":\"FAQ\",\"name\":\"faq\",\"type\":\"page\",\"path\":\"/faq/faq\",\"description\":\"Frequently asked questions about WPGraphQL\",\"children\":{}},\"schema\":{\"title\":\"Schema FAQ\",\"name\":\"schema\",\"type\":\"page\",\"path\":\"/faq/schema\",\"description\":\"Frequently asked questions about the WPGraphQL Schema\",\"children\":{}}}}},\"node\":{\"fileAbsolutePath\":\"/Users/jasonbahl/Sites/wp-graphql-site/src/content/000-getting-started/01-about.md\",\"id\":\"/Users/jasonbahl/Sites/wp-graphql-site/src/content/000-getting-started/01-about.md absPath of file >>> MarkdownRemark\",\"shortExcerpt\":\"WPGraphQL - A free, open-source WordPress plugin that provides an extendable GraphQL schema and API…\",\"excerpt\":\"WPGraphQL - A free, open-source WordPress plugin that provides an extendable GraphQL schema and API for any WordPress site. You are currently viewing the WPGraphQL docs and reference, where you can read about major concepts, dive into technical details or follow practical examples to learn how WPGraphQL works. Website  •  ApiGen Code Docs  •  Slack \\n Warning: \\nUntil WPGraphQL hits a  1.0.0 release , it is still considered beta software. This doesn’t mean that the plugin isn’t ready for use, it just means that there  might  still be  bugs  and that there  might  be breaking changes to the shape of the API or internal functions as we work toward a stable release.  Don’t hesitate to start using the plugin, but just be sure to follow along with  releases  \\nand keep up to date with conversations in  Slack  ( join here )   WPGraphQL is already in use in production on several sites, including  work.qz.com ,  hopelabs.org  and more. What is WPGraphQL? WPGraphQL is A free, open-source WordPress…\",\"html\":\"<p><img src=\\\"https://www.wpgraphql.com/wp-content/uploads/2017/06/wpgraphql-logo-e1502819081849.png\\\" alt=\\\"Logo\\\"></p>\\n<p>WPGraphQL - A free, open-source WordPress plugin that provides an extendable GraphQL schema and API for any WordPress site.</p>\\n<p>You are currently viewing the WPGraphQL docs and reference, where you can read about major concepts, dive into technical details or follow practical examples to learn how WPGraphQL works.</p>\\n<p><a href=\\\"https://www.wpgraphql.com\\\" target=\\\"_blank\\\">Website</a> • <a href=\\\"https://wp-graphql.github.io/wp-graphql-api-docs/\\\" target=\\\"_blank\\\">ApiGen Code Docs</a> • <a href=\\\"https://wpgql-slack.herokuapp.com/\\\" target=\\\"_blank\\\">Slack</a></p>\\n<p><a href=\\\"https://travis-ci.org/wp-graphql/wp-graphql\\\"><img src=\\\"https://travis-ci.org/wp-graphql/wp-graphql.svg?branch=master\\\" alt=\\\"Build Status\\\"></a>\\n<a href=\\\"https://coveralls.io/github/wp-graphql/wp-graphql?branch=master\\\"><img src=\\\"https://coveralls.io/repos/github/wp-graphql/wp-graphql/badge.svg?branch=master\\\" alt=\\\"Coverage Status\\\"></a></p>\\n<hr>\\n<blockquote>\\n<p><strong>Warning:</strong>\\nUntil WPGraphQL hits a <a href=\\\"contributing.md\\\">1.0.0 release</a>, it is still considered beta software. This doesn’t mean that the plugin isn’t ready for use, it just means that there <em>might</em> still be <a href=\\\"https://github.com/wp-graphql/wp-graphql\\\">bugs</a> and that there <em>might</em> be breaking changes to the shape of the API or internal functions as we work toward a stable release. </p>\\n<p>Don’t hesitate to start using the plugin, but just be sure to follow along with <a href=\\\"https://github.com/wp-graphql/wp-graphql/releases\\\">releases</a>\\nand keep up to date with conversations in <a href=\\\"https://wpgraphql.com/community\\\">Slack (join here)</a> </p>\\n<p>WPGraphQL is already in use in production on several sites, including <a href=\\\"https://work.qz.com\\\">work.qz.com</a>, <a href=\\\"http://hopelabs.org\\\">hopelabs.org</a> and more.</p>\\n</blockquote>\\n<h1 id=\\\"what-is-wpgraphql\\\"><a href=\\\"#what-is-wpgraphql\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>What is WPGraphQL?</h1>\\n<p>WPGraphQL is A free, open-source WordPress plugin that provides an extendable <a href=\\\"http://graphql.org\\\">GraphQL</a> GraphQL Schema and API for any WordPress site.</p>\\n<p>WPGraphQL provides a GraphQL API and <code>/graphql</code> endpoint for your WordPress site, allowing for interaction with WordPress data using <a href=\\\"http://graphql.org/learn/queries/\\\">GraphQL Queries and Mutations</a>.</p>\\n<h2 id=\\\"what-is-graphql\\\"><a href=\\\"#what-is-graphql\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>What is GraphQL?</h2>\\n<p>GraphQL is an open source technical specification, developed and maintained by Facebook, for an application level query language. </p>\\n<p>What does that mean? Basically GraphQL provides a consistent way to make declarative queries, which will enable you to more easily retrieve the data you want, and the shape that you want it in. </p>\\n<p>GraphQL can be implemented in any language and can cover a vast amount of use cases. </p>\\n<p>WPGraphQL exposes a WordPress installation’s data through a GraphQL API. You can send a GraphQL request over HTTP to the <code>/graphql</code> endpoint provided by the plugin and in response you will get the matching JSON representation of your data.</p>\\n<p>!!! note “Use WPGraphQL without HTTP requests”\\nYou can also use GraphQL Queries and Mutations from within WordPress PHP without the need for HTTP network requests. <a href=\\\"tutorials/use-graphql-in-php-without-http-request.md\\\">Learn more</a></p>\\n<h2 id=\\\"why-use-wpgraphql\\\"><a href=\\\"#why-use-wpgraphql\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Why use WPGraphQL?</h2>\\n<p>WPGraphQL is arguably the easiest <em>and</em> most efficient way to interact with WordPress data.</p>\\n<p>GraphQL enables small, efficient responses by only retrieving and returning exactly what was asked for, and nothing more.</p>\\n<p>WPGraphQL helps reduce:</p>\\n<ul>\\n<li><strong>HTTP Requests:</strong> Multiple resources can be fetched in a single request</li>\\n<li><strong>Response size:</strong> Only the fields asked for are returned minimizing the payload downloaded by the client</li>\\n<li><strong>Endpoint Bloat:</strong> GraphQL provides a single endpoint and allows clients to ask for what they want from the single source. No need to memorize and maintain various feature endpoints.</li>\\n<li><strong>External Documentation:</strong> GraphQL is self-documenting, reducing the time and resources needed for maintaining API documentation</li>\\n<li><strong>Total SQL queries:</strong> GraphQL queries can ask for multiple resources, or nested resources in a single request allowing GraphQL to determine the most efficient way to get the data from the database with as few SQL queries as possible.</li>\\n<li><strong>Code Duplication:</strong> Because GraphQL exposes all server capabilities in a single Schema, there’s no need to duplicate code for various endpoints. The client can control the shape of their model without specific feature endpoint, which typically requires duplicate server code.</li>\\n<li><strong>Over/Under Fetching:</strong> With REST, you are constantly over and under-fetching at the same time. Endpoints typically have more data than you need, and not enough requiring round-trips to get other resources. GraphQL returns exactly what was asked for and can handle connections in a single request.</li>\\n</ul>\\n<p>WPGraphQL helps improve:</p>\\n<ul>\\n<li><strong>Performance:</strong> WPGraphQL utilizies existing WordPress Core APIs, such as WP_Query, so caching and filters are respected, but WPGraphQL also makes use of deferred resolvers and some look-ahead techniques (as all fields are known in the request before execution begins), allowing for data to be fetched and returned with as few SQL queries as possible. </li>\\n<li><strong>Developer Happiness:</strong> The strong-type system and explicit nature of GraphQL requests makes it easy for developers to understand GraphQL query and mutation requests long after code is written. Additionally, code duplication is drastically reduced as the API is defined in one spot, not in feature endpoints.</li>\\n<li><strong>Versioning:</strong> REST APIs and other APIs can be difficult to version. GraphQL makes <a href=\\\"http://graphql.org/#without-versions\\\">evolving the API</a> much easier than how other APIs are versioned. </li>\\n<li><strong>Client/Server Decoupling:</strong> Since the GraphQL server describes the capabilities and the client defines the shape of the model, the coupling between client and server is loosened. Clients can iterate their models without custom endpoints needing to be created or updated.</li>\\n</ul>\\n<h2 id=\\\"how-does-wpgraphql-work\\\"><a href=\\\"#how-does-wpgraphql-work\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>How does WPGraphQL Work?</h2>\\n<p>WPGraphQL adds a <code>/graphql</code> endpoint to your WordPress install. </p>\\n<p>When HTTP requests are made to that endpoint, WPGraphQL executes the GraphQL request. </p>\\n<p>!!! note “Use WPGraphQL without HTTP requests”\\nYou can also use GraphQL Queries and Mutations from within WordPress PHP without the need for HTTP network requests. <a href=\\\"tutorials/use-graphql-in-php-without-http-request.md\\\">Learn more</a></p>\\n<p>The first part of the execution process, is validating the Query. Since GraphQL is centered around a strong typed Schema, before any real execution begins GraphQL can compare the request against the Schema to make sure the request is even valid. </p>\\n<p>If it’s invalid, no execution occurs, errors are returned right away. </p>\\n<p>If the request is valid, GraphQL breaks down the fields and resolves them as a tree, passing the resolved data down to the next fields in the tree. </p>\\n<p>Take this query for example: </p>\\n{\\n  post(id:\\\"...\\\") {\\n     id\\n     title\\n     customField\\n  }\\n}\\n<p>Behind the Scenes, GraphQL uses native WordPress Core functions to resolve the post by it’s ID. </p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code>\\\\<span class=\\\"token package\\\">WP_Post</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token function\\\">get_instance</span><span class=\\\"token punctuation\\\">(</span> <span class=\\\"token variable\\\">$id</span> <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>Then, GraphQL passes the Post down to the fields to be resolved. The fields use the Post as context to resolve the <code>id</code>, <code>title</code>, and <code>customField</code>. </p>\\n<p>Once all fields are resolved, GraphQL returns the response in JSON format. </p>\",\"timeToRead\":5,\"frontmatter\":{\"title\":\"About\",\"description\":\"Learn about the WPGraphQL Plugin and how to uses this site\",\"path\":\"getting-started/about\"}},\"next\":{\"id\":\"/Users/jasonbahl/Sites/wp-graphql-site/src/content/000-getting-started/02-install-and-activate.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"title\":\"Install and activate\",\"description\":\"Details on installing and activating the WPGraphQL WordPress plugin\",\"path\":\"getting-started/install-and-activate\"}},\"previous\":null}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---getting-started-about-b6fcfae119dadb8a7844.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p><img src=\\\"https://www.wpgraphql.com/wp-content/uploads/2017/06/wpgraphql-logo-e1502819081849.png\\\" alt=\\\"Logo\\\"></p>\\n<p>WPGraphQL - A free, open-source WordPress plugin that provides an extendable GraphQL schema and API for any WordPress site.</p>\\n<p>You are currently viewing the WPGraphQL docs and reference, where you can read about major concepts, dive into technical details or follow practical examples to learn how WPGraphQL works.</p>\\n<p><a href=\\\"https://www.wpgraphql.com\\\" target=\\\"_blank\\\">Website</a> • <a href=\\\"https://wp-graphql.github.io/wp-graphql-api-docs/\\\" target=\\\"_blank\\\">ApiGen Code Docs</a> • <a href=\\\"https://wpgql-slack.herokuapp.com/\\\" target=\\\"_blank\\\">Slack</a></p>\\n<p><a href=\\\"https://travis-ci.org/wp-graphql/wp-graphql\\\"><img src=\\\"https://travis-ci.org/wp-graphql/wp-graphql.svg?branch=master\\\" alt=\\\"Build Status\\\"></a>\\n<a href=\\\"https://coveralls.io/github/wp-graphql/wp-graphql?branch=master\\\"><img src=\\\"https://coveralls.io/repos/github/wp-graphql/wp-graphql/badge.svg?branch=master\\\" alt=\\\"Coverage Status\\\"></a></p>\\n<hr>\\n<blockquote>\\n<p><strong>Warning:</strong>\\nUntil WPGraphQL hits a <a href=\\\"contributing.md\\\">1.0.0 release</a>, it is still considered beta software. This doesn’t mean that the plugin isn’t ready for use, it just means that there <em>might</em> still be <a href=\\\"https://github.com/wp-graphql/wp-graphql\\\">bugs</a> and that there <em>might</em> be breaking changes to the shape of the API or internal functions as we work toward a stable release. </p>\\n<p>Don’t hesitate to start using the plugin, but just be sure to follow along with <a href=\\\"https://github.com/wp-graphql/wp-graphql/releases\\\">releases</a>\\nand keep up to date with conversations in <a href=\\\"https://wpgraphql.com/community\\\">Slack (join here)</a> </p>\\n<p>WPGraphQL is already in use in production on several sites, including <a href=\\\"https://work.qz.com\\\">work.qz.com</a>, <a href=\\\"http://hopelabs.org\\\">hopelabs.org</a> and more.</p>\\n</blockquote>\\n<h1 id=\\\"what-is-wpgraphql\\\"><a href=\\\"#what-is-wpgraphql\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>What is WPGraphQL?</h1>\\n<p>WPGraphQL is A free, open-source WordPress plugin that provides an extendable <a href=\\\"http://graphql.org\\\">GraphQL</a> GraphQL Schema and API for any WordPress site.</p>\\n<p>WPGraphQL provides a GraphQL API and <code>/graphql</code> endpoint for your WordPress site, allowing for interaction with WordPress data using <a href=\\\"http://graphql.org/learn/queries/\\\">GraphQL Queries and Mutations</a>.</p>\\n<h2 id=\\\"what-is-graphql\\\"><a href=\\\"#what-is-graphql\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>What is GraphQL?</h2>\\n<p>GraphQL is an open source technical specification, developed and maintained by Facebook, for an application level query language. </p>\\n<p>What does that mean? Basically GraphQL provides a consistent way to make declarative queries, which will enable you to more easily retrieve the data you want, and the shape that you want it in. </p>\\n<p>GraphQL can be implemented in any language and can cover a vast amount of use cases. </p>\\n<p>WPGraphQL exposes a WordPress installation’s data through a GraphQL API. You can send a GraphQL request over HTTP to the <code>/graphql</code> endpoint provided by the plugin and in response you will get the matching JSON representation of your data.</p>\\n<p>!!! note “Use WPGraphQL without HTTP requests”\\nYou can also use GraphQL Queries and Mutations from within WordPress PHP without the need for HTTP network requests. <a href=\\\"tutorials/use-graphql-in-php-without-http-request.md\\\">Learn more</a></p>\\n<h2 id=\\\"why-use-wpgraphql\\\"><a href=\\\"#why-use-wpgraphql\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Why use WPGraphQL?</h2>\\n<p>WPGraphQL is arguably the easiest <em>and</em> most efficient way to interact with WordPress data.</p>\\n<p>GraphQL enables small, efficient responses by only retrieving and returning exactly what was asked for, and nothing more.</p>\\n<p>WPGraphQL helps reduce:</p>\\n<ul>\\n<li><strong>HTTP Requests:</strong> Multiple resources can be fetched in a single request</li>\\n<li><strong>Response size:</strong> Only the fields asked for are returned minimizing the payload downloaded by the client</li>\\n<li><strong>Endpoint Bloat:</strong> GraphQL provides a single endpoint and allows clients to ask for what they want from the single source. No need to memorize and maintain various feature endpoints.</li>\\n<li><strong>External Documentation:</strong> GraphQL is self-documenting, reducing the time and resources needed for maintaining API documentation</li>\\n<li><strong>Total SQL queries:</strong> GraphQL queries can ask for multiple resources, or nested resources in a single request allowing GraphQL to determine the most efficient way to get the data from the database with as few SQL queries as possible.</li>\\n<li><strong>Code Duplication:</strong> Because GraphQL exposes all server capabilities in a single Schema, there’s no need to duplicate code for various endpoints. The client can control the shape of their model without specific feature endpoint, which typically requires duplicate server code.</li>\\n<li><strong>Over/Under Fetching:</strong> With REST, you are constantly over and under-fetching at the same time. Endpoints typically have more data than you need, and not enough requiring round-trips to get other resources. GraphQL returns exactly what was asked for and can handle connections in a single request.</li>\\n</ul>\\n<p>WPGraphQL helps improve:</p>\\n<ul>\\n<li><strong>Performance:</strong> WPGraphQL utilizies existing WordPress Core APIs, such as WP_Query, so caching and filters are respected, but WPGraphQL also makes use of deferred resolvers and some look-ahead techniques (as all fields are known in the request before execution begins), allowing for data to be fetched and returned with as few SQL queries as possible. </li>\\n<li><strong>Developer Happiness:</strong> The strong-type system and explicit nature of GraphQL requests makes it easy for developers to understand GraphQL query and mutation requests long after code is written. Additionally, code duplication is drastically reduced as the API is defined in one spot, not in feature endpoints.</li>\\n<li><strong>Versioning:</strong> REST APIs and other APIs can be difficult to version. GraphQL makes <a href=\\\"http://graphql.org/#without-versions\\\">evolving the API</a> much easier than how other APIs are versioned. </li>\\n<li><strong>Client/Server Decoupling:</strong> Since the GraphQL server describes the capabilities and the client defines the shape of the model, the coupling between client and server is loosened. Clients can iterate their models without custom endpoints needing to be created or updated.</li>\\n</ul>\\n<h2 id=\\\"how-does-wpgraphql-work\\\"><a href=\\\"#how-does-wpgraphql-work\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>How does WPGraphQL Work?</h2>\\n<p>WPGraphQL adds a <code>/graphql</code> endpoint to your WordPress install. </p>\\n<p>When HTTP requests are made to that endpoint, WPGraphQL executes the GraphQL request. </p>\\n<p>!!! note “Use WPGraphQL without HTTP requests”\\nYou can also use GraphQL Queries and Mutations from within WordPress PHP without the need for HTTP network requests. <a href=\\\"tutorials/use-graphql-in-php-without-http-request.md\\\">Learn more</a></p>\\n<p>The first part of the execution process, is validating the Query. Since GraphQL is centered around a strong typed Schema, before any real execution begins GraphQL can compare the request against the Schema to make sure the request is even valid. </p>\\n<p>If it’s invalid, no execution occurs, errors are returned right away. </p>\\n<p>If the request is valid, GraphQL breaks down the fields and resolves them as a tree, passing the resolved data down to the next fields in the tree. </p>\\n<p>Take this query for example: </p>\\n{\\n  post(id:\\\"...\\\") {\\n     id\\n     title\\n     customField\\n  }\\n}\\n<p>Behind the Scenes, GraphQL uses native WordPress Core functions to resolve the post by it’s ID. </p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code>\\\\<span class=\\\"token package\\\">WP_Post</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token function\\\">get_instance</span><span class=\\\"token punctuation\\\">(</span> <span class=\\\"token variable\\\">$id</span> <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>Then, GraphQL passes the Post down to the fields to be resolved. The fields use the Post as context to resolve the <code>id</code>, <code>title</code>, and <code>customField</code>. </p>\\n<p>Once all fields are resolved, GraphQL returns the response in JSON format. </p>\",\"frontmatter\":{\"path\":\"getting-started/about\",\"title\":\"About\"}}},\"pathContext\":{\"path\":\"getting-started/about\",\"nav\":{\"getting-started\":{\"title\":\"Getting-started\",\"name\":\"getting-started\",\"type\":\"directory\",\"path\":\"/getting-started/about\",\"children\":{\"about\":{\"title\":\"About\",\"name\":\"about\",\"type\":\"page\",\"path\":\"/getting-started/about\",\"description\":\"Learn about the WPGraphQL Plugin and how to uses this site\",\"children\":{}},\"install-and-activate\":{\"title\":\"Install and activate\",\"name\":\"install-and-activate\",\"type\":\"page\",\"path\":\"/getting-started/install-and-activate\",\"description\":\"Details on installing and activating the WPGraphQL WordPress plugin\",\"children\":{}},\"contributing\":{\"title\":\"Contributing\",\"name\":\"contributing\",\"type\":\"page\",\"path\":\"/getting-started/contributing\",\"description\":\"Information about contributing to WPGraphQL\",\"children\":{}},\"community-and-support\":{\"title\":\"Community and Support\",\"name\":\"community-and-support\",\"type\":\"page\",\"path\":\"/getting-started/community-and-support\",\"description\":\"Where to find WPGraphQL out in the wild, and how to get support\",\"children\":{}}}},\"tutorials\":{\"title\":\"Tutorials\",\"name\":\"tutorials\",\"type\":\"directory\",\"path\":\"/tutorials/add-fields-to-schema\",\"children\":{\"add-fields-to-schema\":{\"title\":\"Adding fields to the Schema\",\"name\":\"add-fields-to-schema\",\"type\":\"page\",\"path\":\"/tutorials/add-fields-to-schema\",\"description\":\"Learn how to hook into the WPGraphQL Schema to add fields for your custom needs.\",\"children\":{}},\"custom-post-types-and-taxonomies\":{\"title\":\"Custom Post Types and Taxonomies\",\"name\":\"custom-post-types-and-taxonomies\",\"type\":\"page\",\"path\":\"/tutorials/custom-post-types-and-taxonomies\",\"description\":\"Learn how to add Custom Post Types and Custom Taxonomies to WPGraphQL\",\"children\":{}},\"exploring-graphql\":{\"title\":\"Exploring WPGraphQL\",\"name\":\"exploring-graphql\",\"type\":\"page\",\"path\":\"/tutorials/exploring-graphql\",\"description\":\"Using tools such as GraphiQL to explore the capabilities of WPGraphQL\",\"children\":{}},\"override-field-resolvers\":{\"title\":\"Override Field Resolvers\",\"name\":\"override-field-resolvers\",\"type\":\"page\",\"path\":\"/tutorials/override-field-resolvers\",\"description\":\"Learn how to override existing field resolvers to resolve custom data\",\"children\":{}},\"testing-extensions\":{\"title\":\"Testing Extensions\",\"name\":\"testing-extensions\",\"type\":\"page\",\"path\":\"/tutorials/testing-extensions\",\"description\":\"Learn how to write unit tests for code that extends WPGraphQL\",\"children\":{}},\"testing\":{\"title\":\"Testing WPGraphQL\",\"name\":\"testing\",\"type\":\"page\",\"path\":\"/tutorials/testing\",\"description\":\"Learn how to write, run and contribute to unit and integration tests for WPGraphQL\",\"children\":{}},\"graphql-in-php\":{\"title\":\"Using GraphQL in PHP\",\"name\":\"graphql-in-php\",\"type\":\"page\",\"path\":\"/tutorials/graphql-in-php\",\"description\":\"Learn how to use GraphQL queries and mutations in WordPress theme and plugin code without remote HTTP requests\",\"children\":{}}}},\"recipes\":{\"title\":\"Recipes\",\"name\":\"recipes\",\"type\":\"directory\",\"path\":\"/recipes/comments\",\"children\":{\"comments\":{\"title\":\"Comments\",\"name\":\"comments\",\"type\":\"page\",\"path\":\"/recipes/comments\",\"description\":\"Recipes for interacting with WordPress comments using WPGraphQL\",\"children\":{}},\"options\":{\"title\":\"Options\",\"name\":\"options\",\"type\":\"page\",\"path\":\"/recipes/options\",\"description\":\"Recipes for interacting with WordPress options using WPGraphQL\",\"children\":{}},\"plugins\":{\"title\":\"Plugins\",\"name\":\"plugins\",\"type\":\"page\",\"path\":\"/recipes/plugins\",\"description\":\"Recipes for interacting with WordPress Plugins using WPGraphQL\",\"children\":{}},\"posts\":{\"title\":\"Posts\",\"name\":\"posts\",\"type\":\"page\",\"path\":\"/recipes/posts\",\"description\":\"Recipes for interacting with WordPress posts (and supported custom post types) using WPGraphQL\",\"children\":{}},\"terms\":{\"title\":\"Terms\",\"name\":\"terms\",\"type\":\"page\",\"path\":\"/recipes/terms\",\"description\":\"Recipes for interacting with Categories, Tags (and terms of other supported taxonomies) using WPGraphQL\",\"children\":{}},\"themes\":{\"title\":\"Themes\",\"name\":\"themes\",\"type\":\"page\",\"path\":\"/recipes/themes\",\"description\":\"Recipes for interacting with Themes using WPGraphQL\",\"children\":{}},\"users\":{\"title\":\"Users\",\"name\":\"users\",\"type\":\"page\",\"path\":\"/recipes/users\",\"description\":\"Recipes for interacting with WordPress Users using WPGraphQL\",\"children\":{}}}},\"reference\":{\"title\":\"Reference\",\"name\":\"reference\",\"type\":\"directory\",\"path\":\"/reference/actions-filters\",\"children\":{\"actions-filters\":{\"title\":\"Actions & Filters\",\"name\":\"actions-filters\",\"type\":\"page\",\"path\":\"/reference/actions-filters\",\"description\":\"Action & Filter reference for the WPGraphQL Plugin\",\"children\":{}},\"auth\":{\"title\":\"Auth\",\"name\":\"auth\",\"type\":\"page\",\"path\":\"/reference/auth\",\"description\":\"Understand how WPGraphQL deals with Authorization and Authentication\",\"children\":{}},\"deferred-resolvers\":{\"title\":\"Deferred Resolvers\",\"name\":\"deferred-resolvers\",\"type\":\"page\",\"path\":\"/reference/deferred-resolvers\",\"description\":\"Understand how GraphQL utilizes Deferred resolvers to efficiently fetch and resolve data\",\"children\":{}},\"extensions\":{\"title\":\"Extensions\",\"name\":\"extensions\",\"type\":\"page\",\"path\":\"/reference/extensions\",\"description\":\"Learn about WPGraphQL extensions from the community\",\"children\":{}},\"tooling\":{\"title\":\"Tooling\",\"name\":\"tooling\",\"type\":\"page\",\"path\":\"/reference/tooling\",\"description\":\"Learn about tooling for working with GraphQL in general (and WPGraphQL specifically)\",\"children\":{}},\"types-schema\":{\"title\":\"Types and Schema\",\"name\":\"types-schema\",\"type\":\"page\",\"path\":\"/reference/types-schema\",\"description\":\"Learn more about how GraphQL Types and Schema work\",\"children\":{}},\"unit-tests\":{\"title\":\"Unit Tests\",\"name\":\"unit-tests\",\"type\":\"page\",\"path\":\"/reference/unit-tests\",\"description\":\"Learn more about how WPGraphQL unit tests are setup\",\"children\":{}}}},\"faq\":{\"title\":\"Faq\",\"name\":\"faq\",\"type\":\"directory\",\"path\":\"/faq/client\",\"children\":{\"client\":{\"title\":\"Client FAQ\",\"name\":\"client\",\"type\":\"page\",\"path\":\"/faq/client\",\"description\":\"Frequently asked questions about using WPGraphQL in the client\",\"children\":{}},\"contributing\":{\"title\":\"Contributing\",\"name\":\"contributing\",\"type\":\"page\",\"path\":\"/faq/contributing\",\"description\":\"Frequently asked questions about contributing to WPGraphQL\",\"children\":{}},\"extending\":{\"title\":\"Extending\",\"name\":\"extending\",\"type\":\"page\",\"path\":\"/faq/extending\",\"description\":\"Frequently asked questions about extending WPGraphQL\",\"children\":{}},\"faq\":{\"title\":\"FAQ\",\"name\":\"faq\",\"type\":\"page\",\"path\":\"/faq/faq\",\"description\":\"Frequently asked questions about WPGraphQL\",\"children\":{}},\"schema\":{\"title\":\"Schema FAQ\",\"name\":\"schema\",\"type\":\"page\",\"path\":\"/faq/schema\",\"description\":\"Frequently asked questions about the WPGraphQL Schema\",\"children\":{}}}}},\"node\":{\"fileAbsolutePath\":\"/Users/jasonbahl/Sites/wp-graphql-site/src/content/000-getting-started/01-about.md\",\"id\":\"/Users/jasonbahl/Sites/wp-graphql-site/src/content/000-getting-started/01-about.md absPath of file >>> MarkdownRemark\",\"shortExcerpt\":\"WPGraphQL - A free, open-source WordPress plugin that provides an extendable GraphQL schema and API…\",\"excerpt\":\"WPGraphQL - A free, open-source WordPress plugin that provides an extendable GraphQL schema and API for any WordPress site. You are currently viewing the WPGraphQL docs and reference, where you can read about major concepts, dive into technical details or follow practical examples to learn how WPGraphQL works. Website  •  ApiGen Code Docs  •  Slack \\n Warning: \\nUntil WPGraphQL hits a  1.0.0 release , it is still considered beta software. This doesn’t mean that the plugin isn’t ready for use, it just means that there  might  still be  bugs  and that there  might  be breaking changes to the shape of the API or internal functions as we work toward a stable release.  Don’t hesitate to start using the plugin, but just be sure to follow along with  releases  \\nand keep up to date with conversations in  Slack  ( join here )   WPGraphQL is already in use in production on several sites, including  work.qz.com ,  hopelabs.org  and more. What is WPGraphQL? WPGraphQL is A free, open-source WordPress…\",\"html\":\"<p><img src=\\\"https://www.wpgraphql.com/wp-content/uploads/2017/06/wpgraphql-logo-e1502819081849.png\\\" alt=\\\"Logo\\\"></p>\\n<p>WPGraphQL - A free, open-source WordPress plugin that provides an extendable GraphQL schema and API for any WordPress site.</p>\\n<p>You are currently viewing the WPGraphQL docs and reference, where you can read about major concepts, dive into technical details or follow practical examples to learn how WPGraphQL works.</p>\\n<p><a href=\\\"https://www.wpgraphql.com\\\" target=\\\"_blank\\\">Website</a> • <a href=\\\"https://wp-graphql.github.io/wp-graphql-api-docs/\\\" target=\\\"_blank\\\">ApiGen Code Docs</a> • <a href=\\\"https://wpgql-slack.herokuapp.com/\\\" target=\\\"_blank\\\">Slack</a></p>\\n<p><a href=\\\"https://travis-ci.org/wp-graphql/wp-graphql\\\"><img src=\\\"https://travis-ci.org/wp-graphql/wp-graphql.svg?branch=master\\\" alt=\\\"Build Status\\\"></a>\\n<a href=\\\"https://coveralls.io/github/wp-graphql/wp-graphql?branch=master\\\"><img src=\\\"https://coveralls.io/repos/github/wp-graphql/wp-graphql/badge.svg?branch=master\\\" alt=\\\"Coverage Status\\\"></a></p>\\n<hr>\\n<blockquote>\\n<p><strong>Warning:</strong>\\nUntil WPGraphQL hits a <a href=\\\"contributing.md\\\">1.0.0 release</a>, it is still considered beta software. This doesn’t mean that the plugin isn’t ready for use, it just means that there <em>might</em> still be <a href=\\\"https://github.com/wp-graphql/wp-graphql\\\">bugs</a> and that there <em>might</em> be breaking changes to the shape of the API or internal functions as we work toward a stable release. </p>\\n<p>Don’t hesitate to start using the plugin, but just be sure to follow along with <a href=\\\"https://github.com/wp-graphql/wp-graphql/releases\\\">releases</a>\\nand keep up to date with conversations in <a href=\\\"https://wpgraphql.com/community\\\">Slack (join here)</a> </p>\\n<p>WPGraphQL is already in use in production on several sites, including <a href=\\\"https://work.qz.com\\\">work.qz.com</a>, <a href=\\\"http://hopelabs.org\\\">hopelabs.org</a> and more.</p>\\n</blockquote>\\n<h1 id=\\\"what-is-wpgraphql\\\"><a href=\\\"#what-is-wpgraphql\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>What is WPGraphQL?</h1>\\n<p>WPGraphQL is A free, open-source WordPress plugin that provides an extendable <a href=\\\"http://graphql.org\\\">GraphQL</a> GraphQL Schema and API for any WordPress site.</p>\\n<p>WPGraphQL provides a GraphQL API and <code>/graphql</code> endpoint for your WordPress site, allowing for interaction with WordPress data using <a href=\\\"http://graphql.org/learn/queries/\\\">GraphQL Queries and Mutations</a>.</p>\\n<h2 id=\\\"what-is-graphql\\\"><a href=\\\"#what-is-graphql\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>What is GraphQL?</h2>\\n<p>GraphQL is an open source technical specification, developed and maintained by Facebook, for an application level query language. </p>\\n<p>What does that mean? Basically GraphQL provides a consistent way to make declarative queries, which will enable you to more easily retrieve the data you want, and the shape that you want it in. </p>\\n<p>GraphQL can be implemented in any language and can cover a vast amount of use cases. </p>\\n<p>WPGraphQL exposes a WordPress installation’s data through a GraphQL API. You can send a GraphQL request over HTTP to the <code>/graphql</code> endpoint provided by the plugin and in response you will get the matching JSON representation of your data.</p>\\n<p>!!! note “Use WPGraphQL without HTTP requests”\\nYou can also use GraphQL Queries and Mutations from within WordPress PHP without the need for HTTP network requests. <a href=\\\"tutorials/use-graphql-in-php-without-http-request.md\\\">Learn more</a></p>\\n<h2 id=\\\"why-use-wpgraphql\\\"><a href=\\\"#why-use-wpgraphql\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Why use WPGraphQL?</h2>\\n<p>WPGraphQL is arguably the easiest <em>and</em> most efficient way to interact with WordPress data.</p>\\n<p>GraphQL enables small, efficient responses by only retrieving and returning exactly what was asked for, and nothing more.</p>\\n<p>WPGraphQL helps reduce:</p>\\n<ul>\\n<li><strong>HTTP Requests:</strong> Multiple resources can be fetched in a single request</li>\\n<li><strong>Response size:</strong> Only the fields asked for are returned minimizing the payload downloaded by the client</li>\\n<li><strong>Endpoint Bloat:</strong> GraphQL provides a single endpoint and allows clients to ask for what they want from the single source. No need to memorize and maintain various feature endpoints.</li>\\n<li><strong>External Documentation:</strong> GraphQL is self-documenting, reducing the time and resources needed for maintaining API documentation</li>\\n<li><strong>Total SQL queries:</strong> GraphQL queries can ask for multiple resources, or nested resources in a single request allowing GraphQL to determine the most efficient way to get the data from the database with as few SQL queries as possible.</li>\\n<li><strong>Code Duplication:</strong> Because GraphQL exposes all server capabilities in a single Schema, there’s no need to duplicate code for various endpoints. The client can control the shape of their model without specific feature endpoint, which typically requires duplicate server code.</li>\\n<li><strong>Over/Under Fetching:</strong> With REST, you are constantly over and under-fetching at the same time. Endpoints typically have more data than you need, and not enough requiring round-trips to get other resources. GraphQL returns exactly what was asked for and can handle connections in a single request.</li>\\n</ul>\\n<p>WPGraphQL helps improve:</p>\\n<ul>\\n<li><strong>Performance:</strong> WPGraphQL utilizies existing WordPress Core APIs, such as WP_Query, so caching and filters are respected, but WPGraphQL also makes use of deferred resolvers and some look-ahead techniques (as all fields are known in the request before execution begins), allowing for data to be fetched and returned with as few SQL queries as possible. </li>\\n<li><strong>Developer Happiness:</strong> The strong-type system and explicit nature of GraphQL requests makes it easy for developers to understand GraphQL query and mutation requests long after code is written. Additionally, code duplication is drastically reduced as the API is defined in one spot, not in feature endpoints.</li>\\n<li><strong>Versioning:</strong> REST APIs and other APIs can be difficult to version. GraphQL makes <a href=\\\"http://graphql.org/#without-versions\\\">evolving the API</a> much easier than how other APIs are versioned. </li>\\n<li><strong>Client/Server Decoupling:</strong> Since the GraphQL server describes the capabilities and the client defines the shape of the model, the coupling between client and server is loosened. Clients can iterate their models without custom endpoints needing to be created or updated.</li>\\n</ul>\\n<h2 id=\\\"how-does-wpgraphql-work\\\"><a href=\\\"#how-does-wpgraphql-work\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>How does WPGraphQL Work?</h2>\\n<p>WPGraphQL adds a <code>/graphql</code> endpoint to your WordPress install. </p>\\n<p>When HTTP requests are made to that endpoint, WPGraphQL executes the GraphQL request. </p>\\n<p>!!! note “Use WPGraphQL without HTTP requests”\\nYou can also use GraphQL Queries and Mutations from within WordPress PHP without the need for HTTP network requests. <a href=\\\"tutorials/use-graphql-in-php-without-http-request.md\\\">Learn more</a></p>\\n<p>The first part of the execution process, is validating the Query. Since GraphQL is centered around a strong typed Schema, before any real execution begins GraphQL can compare the request against the Schema to make sure the request is even valid. </p>\\n<p>If it’s invalid, no execution occurs, errors are returned right away. </p>\\n<p>If the request is valid, GraphQL breaks down the fields and resolves them as a tree, passing the resolved data down to the next fields in the tree. </p>\\n<p>Take this query for example: </p>\\n{\\n  post(id:\\\"...\\\") {\\n     id\\n     title\\n     customField\\n  }\\n}\\n<p>Behind the Scenes, GraphQL uses native WordPress Core functions to resolve the post by it’s ID. </p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code>\\\\<span class=\\\"token package\\\">WP_Post</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token function\\\">get_instance</span><span class=\\\"token punctuation\\\">(</span> <span class=\\\"token variable\\\">$id</span> <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>Then, GraphQL passes the Post down to the fields to be resolved. The fields use the Post as context to resolve the <code>id</code>, <code>title</code>, and <code>customField</code>. </p>\\n<p>Once all fields are resolved, GraphQL returns the response in JSON format. </p>\",\"timeToRead\":5,\"frontmatter\":{\"title\":\"About\",\"description\":\"Learn about the WPGraphQL Plugin and how to uses this site\",\"path\":\"getting-started/about\"}},\"next\":{\"id\":\"/Users/jasonbahl/Sites/wp-graphql-site/src/content/000-getting-started/02-install-and-activate.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"title\":\"Install and activate\",\"description\":\"Details on installing and activating the WPGraphQL WordPress plugin\",\"path\":\"getting-started/install-and-activate\"}},\"previous\":null}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/getting-started-about.json\n// module id = 724\n// module chunks = 201535673162239"],"sourceRoot":""}