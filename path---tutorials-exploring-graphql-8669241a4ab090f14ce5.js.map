{"version":3,"sources":["webpack:///path---tutorials-exploring-graphql-8669241a4ab090f14ce5.js","webpack:///./.cache/json/tutorials-exploring-graphql.json"],"names":["webpackJsonp","745","module","exports","data","markdownRemark","html","frontmatter","path","title","pathContext","nav","getting-started","name","type","children","about","description","install-and-activate","contributing","community-and-support","tutorials","add-fields-to-schema","custom-post-types-and-taxonomies","exploring-graphql","override-field-resolvers","testing-extensions","testing","graphql-in-php","recipes","comments","options","plugins","posts","terms","themes","users","reference","actions-filters","auth","deferred-resolvers","extensions","tooling","types-schema","unit-tests","faq","client","extending","schema","node","fileAbsolutePath","id","shortExcerpt","excerpt","timeToRead","next","previous"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,g+oBAA+0jBC,aAAmlGC,KAAA,8BAAAC,MAAA,yBAAqEC,aAAgBF,KAAA,8BAAAG,KAA4CC,mBAAmBH,MAAA,kBAAAI,KAAA,kBAAAC,KAAA,YAAAN,KAAA,yBAAAO,UAAkHC,OAASP,MAAA,QAAAI,KAAA,QAAAC,KAAA,OAAAN,KAAA,yBAAAS,YAAA,6DAAAF,aAAsKG,wBAAyBT,MAAA,uBAAAI,KAAA,uBAAAC,KAAA,OAAAN,KAAA,wCAAAS,YAAA,sEAAAF,aAA4NI,cAAiBV,MAAA,eAAAI,KAAA,eAAAC,KAAA,OAAAN,KAAA,gCAAAS,YAAA,8CAAAF,aAA4KK,yBAA0BX,MAAA,wBAAAI,KAAA,wBAAAC,KAAA,OAAAN,KAAA,yCAAAS,YAAA,kEAAAF,eAA6NM,WAAcZ,MAAA,YAAAI,KAAA,YAAAC,KAAA,YAAAN,KAAA,kCAAAO,UAA+GO,wBAAwBb,MAAA,8BAAAI,KAAA,uBAAAC,KAAA,OAAAN,KAAA,kCAAAS,YAAA,mFAAAF,aAA0OQ,oCAAqCd,MAAA,mCAAAI,KAAA,mCAAAC,KAAA,OAAAN,KAAA,8CAAAS,YAAA,wEAAAF,aAA4PS,qBAAsBf,MAAA,sBAAAI,KAAA,oBAAAC,KAAA,OAAAN,KAAA,+BAAAS,YAAA,wEAAAF,aAAiNU,4BAA6BhB,MAAA,2BAAAI,KAAA,2BAAAC,KAAA,OAAAN,KAAA,sCAAAS,YAAA,wEAAAF,aAAoOW,sBAAuBjB,MAAA,qBAAAI,KAAA,qBAAAC,KAAA,OAAAN,KAAA,gCAAAS,YAAA,gEAAAF,aAA0MY,SAAYlB,MAAA,oBAAAI,KAAA,UAAAC,KAAA,OAAAN,KAAA,qBAAAS,YAAA,qFAAAF,aAAwMa,kBAAmBnB,MAAA,uBAAAI,KAAA,iBAAAC,KAAA,OAAAN,KAAA,4BAAAS,YAAA,iHAAAF,eAAuPc,SAAYpB,MAAA,UAAAI,KAAA,UAAAC,KAAA,YAAAN,KAAA,oBAAAO,UAA6Fe,UAAYrB,MAAA,WAAAI,KAAA,WAAAC,KAAA,OAAAN,KAAA,oBAAAS,YAAA,kEAAAF,aAA4KgB,SAAYtB,MAAA,UAAAI,KAAA,UAAAC,KAAA,OAAAN,KAAA,mBAAAS,YAAA,iEAAAF,aAAwKiB,SAAYvB,MAAA,UAAAI,KAAA,UAAAC,KAAA,OAAAN,KAAA,mBAAAS,YAAA,iEAAAF,aAAwKkB,OAAUxB,MAAA,QAAAI,KAAA,QAAAC,KAAA,OAAAN,KAAA,iBAAAS,YAAA,iGAAAF,aAAkMmB,OAAUzB,MAAA,QAAAI,KAAA,QAAAC,KAAA,OAAAN,KAAA,iBAAAS,YAAA,0GAAAF,aAA2MoB,QAAW1B,MAAA,SAAAI,KAAA,SAAAC,KAAA,OAAAN,KAAA,kBAAAS,YAAA,sDAAAF,aAA0JqB,OAAU3B,MAAA,QAAAI,KAAA,QAAAC,KAAA,OAAAN,KAAA,iBAAAS,YAAA,+DAAAF,eAAkKsB,WAAc5B,MAAA,YAAAI,KAAA,YAAAC,KAAA,YAAAN,KAAA,6BAAAO,UAA0GuB,mBAAmB7B,MAAA,oBAAAI,KAAA,kBAAAC,KAAA,OAAAN,KAAA,6BAAAS,YAAA,qDAAAF,aAAwLwB,MAAS9B,MAAA,OAAAI,KAAA,OAAAC,KAAA,OAAAN,KAAA,kBAAAS,YAAA,uEAAAF,aAAuKyB,sBAAuB/B,MAAA,qBAAAI,KAAA,qBAAAC,KAAA,OAAAN,KAAA,gCAAAS,YAAA,2FAAAF,aAAqO0B,YAAehC,MAAA,aAAAI,KAAA,aAAAC,KAAA,OAAAN,KAAA,wBAAAS,YAAA,sDAAAF,aAAwK2B,SAAYjC,MAAA,UAAAI,KAAA,UAAAC,KAAA,OAAAN,KAAA,qBAAAS,YAAA,uFAAAF,aAAgM4B,gBAAiBlC,MAAA,mBAAAI,KAAA,eAAAC,KAAA,OAAAN,KAAA,0BAAAS,YAAA,qDAAAF,aAAiL6B,cAAenC,MAAA,aAAAI,KAAA,aAAAC,KAAA,OAAAN,KAAA,wBAAAS,YAAA,sDAAAF,eAA0K8B,KAAQpC,MAAA,MAAAI,KAAA,MAAAC,KAAA,YAAAN,KAAA,cAAAO,UAA+E+B,QAAUrC,MAAA,aAAAI,KAAA,SAAAC,KAAA,OAAAN,KAAA,cAAAS,YAAA,iEAAAF,aAAqKI,cAAiBV,MAAA,eAAAI,KAAA,eAAAC,KAAA,OAAAN,KAAA,oBAAAS,YAAA,6DAAAF,aAA+KgC,WAActC,MAAA,YAAAI,KAAA,YAAAC,KAAA,OAAAN,KAAA,iBAAAS,YAAA,uDAAAF,aAAgK8B,KAAQpC,MAAA,MAAAI,KAAA,MAAAC,KAAA,OAAAN,KAAA,WAAAS,YAAA,6CAAAF,aAAoIiC,QAAWvC,MAAA,aAAAI,KAAA,SAAAC,KAAA,OAAAN,KAAA,cAAAS,YAAA,wDAAAF,gBAA+JkC,MAASC,iBAAA,wFAAAC,GAAA,2HAAAC,aAAA,wGAAAC,QAAA,4+BAAA/C,KAAA;AAAuqmBgD,WAAA,EAAA/C,aAAkmGE,MAAA,sBAAAQ,YAAA,wEAAAT,KAAA,gCAA0J+C,MAASJ,GAAA,kIAAA5C,aAAsJE,MAAA,2BAAAQ,YAAA,wEAAAT,KAAA,uCAAsKgD,UAAaL,GAAA,0IAAA5C,aAA8JE,MAAA,mCAAAQ,YAAA,wEAAAT,KAAA","file":"path---tutorials-exploring-graphql-8669241a4ab090f14ce5.js","sourcesContent":["webpackJsonp([63746481681937],{\n\n/***/ 745:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h1 id=\\\"exploring-wpgraphql\\\"><a href=\\\"#exploring-wpgraphql\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Exploring WPGraphQL</h1>\\n<p>In this Tutorial, we will be exploring GraphQL using GraphiQL.</p>\\n<h2 id=\\\"graphiql\\\"><a href=\\\"#graphiql\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>GraphiQL</h2>\\n<p><a href=\\\"https://github.com/graphql/graphiql\\\">GraphiQL</a> is the de-facto tool for interacting with a GraphQL Schema. It’s an open source graphical interactive in-browser GraphQL IDE. </p>\\n<p>It allows users to explore a GraphQL Schema’s documentation, and execute GraphQL queries and mutations and see the response in real time.</p>\\n<p>GraphiQL itself is a React component, so to use it, you need to either implement the React component, or use something that implements it already.</p>\\n<h2 id=\\\"graphiql-tools--apps\\\"><a href=\\\"#graphiql-tools--apps\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>GraphiQL Tools / Apps</h2>\\n<p>Below is a (non-comprehensive) list of tools that implement GraphiQL that you can use to explore and experiment with your WPGraphQL API.</p>\\n<ul>\\n<li><strong><a href=\\\"https://github.com/skevy/graphiql-app\\\">GraphiQL Desktop App</a>:</strong> GraphiQL as an Electron desktop app</li>\\n<li><strong><a href=\\\"https://github.com/wp-graphql/wp-graphiql\\\">WPGraphiQL</a>:</strong> WordPress plugin that adds GraphiQL to the WordPress admin dashboard </li>\\n<li><strong><a href=\\\"https://github.com/graphcool/graphql-playground/releases\\\">GraphQL Playground</a>:</strong> Desktop App from the folks at Graph.Cool.</li>\\n<li><strong><a href=\\\"https://github.com/andev-software/graphql-ide\\\">GraphQL IDE</a>:</strong> Desktop App that supports multiple endpoint configurations</li>\\n<li><strong><a href=\\\"https://chrome.google.com/webstore/detail/altair-graphql-client/flnheeellpciglgpaodhkhmapeljopja?hl=en\\\">Altair</a>:</strong> Chrome Extension</li>\\n<li><strong><a href=\\\"https://chrome.google.com/webstore/detail/chromeiql/fkkiamalmpiidkljmicmjfbieiclmeij?hl=en\\\">ChromiQL</a>:</strong> Chrome Extension</li>\\n</ul>\\n<p>!!! info “This Guide References the GraphiQL Desktop App”\\nThroughout this guide, for screenshots, etc we use <a href=\\\"https://github.com/skevy/graphiql-app\\\">GraphiQL Desktop App</a>. Any specific info on using GraphiQL will be referring to that specific App, but should be generally applicable to any of them.\\nFeel free to use the same one we use, explore the others, or even build your own!</p>\\n<h2 id=\\\"configure-graphiql\\\"><a href=\\\"#configure-graphiql\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Configure GraphiQL</h2>\\n<p>Once you have a WordPress install setup with the <a href=\\\"../install-and-activate.md\\\">WPGraphQL plugin installed and activated</a>\\nand the GraphiQL Desktop App (or other GraphiQL tool) <a href=\\\"https://github.com/skevy/graphiql-app#installation\\\">installed</a>,\\nthe first thing you will want to do is point it at your WPGraphQL endpoint.</p>\\n<p>When the app is first opened, you may notice a blank right pane, or an error showing that GraphiQL failed to fetch. </p>\\n<p><img src=\\\"../assets/images/graphiql-01-error-when-opening-app.png\\\" alt=\\\"GraphiQL Error when first opening the app\\\"></p>\\n<p>This is because GraphiQL isn’t pointed to a valid GraphQL endpoint.</p>\\n<h3 id=\\\"point-it-at-your-endpoint\\\"><a href=\\\"#point-it-at-your-endpoint\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Point it at your endpoint</h3>\\n<p>Toward the top of the App is a “GraphQL Endpoint” text field where you can paste in a URL to your WPGraphQL endpoint.</p>\\n<p>I have a local WordPress install running at <code>wpgraphql.dev</code>, so my endpoint is <code>http://wpgraphql.dev/graphql</code></p>\\n<p>When I paste in my WPGraphQL url, the error goes away. This is because the App went and fetched my GraphQL schema and populated the GraphQL Documentation pane.</p>\\n<p><img src=\\\"../assets/images/graphiql-02-paste-url.gif\\\" alt=\\\"GraphiQL Paste in URL\\\"></p>\\n<h2 id=\\\"explore-your-schema-docs\\\"><a href=\\\"#explore-your-schema-docs\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Explore your Schema Docs</h2>\\n<p>At this point, GraphiQL has fetched your WPGraphQL Schema and generated documentation that you can browse. </p>\\n<p>At the top left of GraphiQL, you should see a ”&#x3C; Docs” link.</p>\\n<p>Clicking that expands the Documentation panel.</p>\\n<p><img src=\\\"../assets/images/graphiql-03-open-docs.gif\\\" alt=\\\"GraphiQL Open Docs\\\"></p>\\n<p>!!! note\\nYou can adjust the width of the Documentation panel to your liking by selecting the left border of the panel and dragging and dropping.\\n<br>\\nFrom the Documentation panel, you can see that at the root of the WPGraphQL Schema is <code>query: RootQuery</code> and <code>mutation: RootMutation</code>. </p>\\n<p>These are the root entry points to the WordPress Application Data Graph.</p>\\n<p>You can click into either to explore the capabilities nested below. </p>\\n<p>For example, clicking <code>RooyQuery</code> displays the fields that are available as part of the root. You can scroll through the list to see what’s available. what the description is, what Type will be returned, and what arguments the field accepts.</p>\\n<p><img src=\\\"../assets/images/graphiql-04-explore-root-query.gif\\\" alt=\\\"GraphiQL Explore Root Query\\\"></p>\\n<p>When looking at the GraphQL Docs, it might be overwhelming trying to understand what everything is that you’re seeing. </p>\\n<p>Here’s an annotated breakdown of what is displayed in the Documentation panel as you explore the docs.</p>\\n<p><img src=\\\"../assets/images/graphiql-05-field-annotation.png\\\" alt=\\\"GraphiQL Annotated Docs\\\"></p>\\n<h3 id=\\\"search-the-docs\\\"><a href=\\\"#search-the-docs\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Search the Docs</h3>\\n<p>In addition to clicking to explore the GraphQL Schema Docs, you can also search the documentation. Let’s say you wanted to\\nknow how to use GraphQL to query for pages. You could search “page” in the Search field in the Documentation pane, and\\nyou would see all results in the Schema where “page” was mentioned. This can help understand all the entry points where “pages”\\ncan be queried. </p>\\n<p><img src=\\\"../assets/images/graphiql-06-search-docs.png\\\" alt=\\\"GraphiQL Search Docs\\\"></p>\\n<p>We can see here that there is a “pages” field on the RootQuery. Next, Let’s try to query for pages!</p>\\n<h2 id=\\\"write-some-queries\\\"><a href=\\\"#write-some-queries\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Write Some Queries</h2>\\n<p>We know we can query “pages” on the RootQuery, because we saw it in the docs, but how do we do that?</p>\\n<p>Well, writing GraphQL Queries in GraphiQL is super intuitive. As you start typing, GraphiQL suggests fields that you might\\nbe looking for and will complete them for you if you press Tab on the highlighted suggestion.</p>\\n<p>Let’s write a query to get a list of pages. </p>\\n<p>GraphiQL has some helper text explaining how to write queries. We can select it all and remove it.</p>\\n<p>Then, since <code>pages</code> is a RootQuery field, we can simply start our query with an opening <code>{</code> bracket, then start typing <code>page</code> and we will see the autoselect pop-up.</p>\\n<p>We can arrow-down to select <code>pages</code>, then press <code>tab</code> and it will autocomplete. </p>\\n<p>Then we need to make a Selection on the <code>pages</code> field. We can use the Documentation explorer to see what’s available to query, or\\nwe can just start typing to see what the Typeahead suggest tells us.</p>\\n<p>Once ready, click the Play button to execute the query.</p>\\n<p>Below, you can see using the Typeahead feature to help build a query and see what fields are available. You can also see how GraphiQL shows helpers\\nwhen the syntax is broken by highlighting things red. </p>\\n<p><img src=\\\"../assets/images/graphiql-07-write-first-query.gif\\\" alt=\\\"GraphiQL Write first Query\\\"></p>\\n<h3 id=\\\"queries-to-try\\\"><a href=\\\"#queries-to-try\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Queries to try</h3>\\n<p>Here are some queries to try. Since GraphQL queries are static strings, you can simply copy these and paste them into your GraphiQL explorer.</p>\\n<h4 id=\\\"get-a-list-of-posts\\\"><a href=\\\"#get-a-list-of-posts\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Get a List of Posts</h4>\\n{\\n  posts {\\n    edges {\\n      node {\\n        id\\n        title\\n        date\\n        content\\n      }\\n    }\\n  }\\n}\\n<h4 id=\\\"get-a-list-of-posts-with-author-info\\\"><a href=\\\"#get-a-list-of-posts-with-author-info\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Get a List of Posts with Author info</h4>\\n<p>This is a pretty neat example of the power of GraphQL. Posts and Users are stored in different tables in WordPress and\\ngetting Post Data and User data typically requires multiple queries. </p>\\n<p>You would typically first use <code>WP_Query</code> to get a list of posts, then while looping through the posts, you would get the author data by querying for that.</p>\\n<p>GraphQL drastically simplifies that, allowing you to just declare what fields you want from each post, and what fields you want from each Post’s author. And,\\nbehind the scenes, WPGraphQL is doing some cool stuff to optimize the queries to make sure the fewest possible queries are run\\nto get the needed data. <a href=\\\"../reference/deferred-resolvers.md\\\">Learn More</a></p>\\n{\\n  posts {\\n    edges {\\n      node {\\n        id\\n        title\\n        date\\n        author {\\n          id\\n          name\\n          username\\n          description\\n        }\\n      }\\n    }\\n  }\\n}\\n<h4 id=\\\"get-a-list-of-users\\\"><a href=\\\"#get-a-list-of-users\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Get a List of Users</h4>\\n{\\n  users {\\n    edges {\\n      node {\\n        id\\n        name\\n        username\\n      }\\n    }\\n  }\\n}\\n<h4 id=\\\"get-a-list-of-users-with-their-recent-posts\\\"><a href=\\\"#get-a-list-of-users-with-their-recent-posts\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Get a List of Users with their Recent Posts</h4>\\n<p>We saw earlier how we can query for Author data on posts, but we can also get to posts from the user as well.</p>\\n<p>Here we are going to query for a list of users, then ask for each users posts, and for each post ask for the author. </p>\\n<p>That makes my head spin, but it’s really not <em>that</em> uncommon of a need.</p>\\n<p>Try executing this and see what you get. </p>\\n{\\n  users {\\n    edges {\\n      node {\\n        id\\n        name\\n        username\\n        posts {\\n          edges {\\n            node {\\n              id\\n              title\\n              date\\n              author {\\n                id\\n                name\\n                username\\n                description\\n              }\\n            }\\n          }\\n        }\\n      }\\n    }\\n  }\\n}\\n<p>You should see a list of users, and on each user you should see a list of posts, if that user has any, or empty post.edges if they don’t. Then the posts should have an author field with the same author data as the user node.</p>\\n<p>Pretty neat!</p>\\n<h2 id=\\\"exploring-aliases\\\"><a href=\\\"#exploring-aliases\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Exploring Aliases</h2>\\n<p>GraphQL has a subtle but very powerful feature called Aliasing. You can set aliases on fields as you query, and the fields will\\nbe returned to you using the specified Alias. </p>\\n<p>This really puts a lot of power in the clients hands.</p>\\n<p>Lets try a simple query with Aliases.</p>\\n{\\n  recentPosts: posts {\\n    items: edges {\\n      post: node {\\n        globalId: id\\n        id: postId\\n        articleTitle: title\\n        articleDate: date\\n      }\\n    }\\n  }\\n}\\n<p>Now run that query and see how the fields are returned with the Aliases set as the key in the response. Wow!</p>\\n<h2 id=\\\"exploring-variables\\\"><a href=\\\"#exploring-variables\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Exploring Variables</h2>\\n<p>Variables are a very powerful feature of GraphQL.  </p>\\n<p>!!! warning “Coming Soon”\\nUntil we have time to write more info on this, you can learn more <a href=\\\"http://graphql.org/learn/queries/#variables\\\">here</a></p>\\n<h2 id=\\\"keep-exploring\\\"><a href=\\\"#keep-exploring\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Keep Exploring</h2>\\n<p>At this point, you should be familiar enough with GraphiQL to continue exploring what kind of data you can access.</p>\\n<h2 id=\\\"debugging-requests\\\"><a href=\\\"#debugging-requests\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Debugging Requests</h2>\\n<p>!!! info “Disclaimer”\\nThis section applies particularly to the <a href=\\\"https://github.com/skevy/graphiql-app\\\">GraphiQL Desktop App</a> as it’s an Electron app.</p>\\n<p>Since the GraphiQL Desktop App is an Electron App, it’s built on Chromium, which means we can open up Chrome developer tools <code>Command + Option + I</code></p>\\n<p>Then in Developer tools, navigate to the <code>Network</code> tab.</p>\\n<p>With the <code>Network</code> tab open, execute a GraphQL Query.</p>\\n<p>You can see the requests that are sent and the payloads that are returned. You can explore the headers and the formatting that GraphiQL uses to send requests, etc.</p>\\n<p>Using the Network tab can be helpful for debugging when something goes wrong and no response is rendered in the GraphiQL response pane.</p>\\n<p>!!! warning “More info coming soon”\\nThis section needs more info…</p>\",\"frontmatter\":{\"path\":\"tutorials/exploring-graphql\",\"title\":\"Exploring WPGraphQL\"}}},\"pathContext\":{\"path\":\"tutorials/exploring-graphql\",\"nav\":{\"getting-started\":{\"title\":\"Getting-started\",\"name\":\"getting-started\",\"type\":\"directory\",\"path\":\"/getting-started/about\",\"children\":{\"about\":{\"title\":\"About\",\"name\":\"about\",\"type\":\"page\",\"path\":\"/getting-started/about\",\"description\":\"Learn about the WPGraphQL Plugin and how to uses this site\",\"children\":{}},\"install-and-activate\":{\"title\":\"Install and activate\",\"name\":\"install-and-activate\",\"type\":\"page\",\"path\":\"/getting-started/install-and-activate\",\"description\":\"Details on installing and activating the WPGraphQL WordPress plugin\",\"children\":{}},\"contributing\":{\"title\":\"Contributing\",\"name\":\"contributing\",\"type\":\"page\",\"path\":\"/getting-started/contributing\",\"description\":\"Information about contributing to WPGraphQL\",\"children\":{}},\"community-and-support\":{\"title\":\"Community and Support\",\"name\":\"community-and-support\",\"type\":\"page\",\"path\":\"/getting-started/community-and-support\",\"description\":\"Where to find WPGraphQL out in the wild, and how to get support\",\"children\":{}}}},\"tutorials\":{\"title\":\"Tutorials\",\"name\":\"tutorials\",\"type\":\"directory\",\"path\":\"/tutorials/add-fields-to-schema\",\"children\":{\"add-fields-to-schema\":{\"title\":\"Adding fields to the Schema\",\"name\":\"add-fields-to-schema\",\"type\":\"page\",\"path\":\"/tutorials/add-fields-to-schema\",\"description\":\"Learn how to hook into the WPGraphQL Schema to add fields for your custom needs.\",\"children\":{}},\"custom-post-types-and-taxonomies\":{\"title\":\"Custom Post Types and Taxonomies\",\"name\":\"custom-post-types-and-taxonomies\",\"type\":\"page\",\"path\":\"/tutorials/custom-post-types-and-taxonomies\",\"description\":\"Learn how to add Custom Post Types and Custom Taxonomies to WPGraphQL\",\"children\":{}},\"exploring-graphql\":{\"title\":\"Exploring WPGraphQL\",\"name\":\"exploring-graphql\",\"type\":\"page\",\"path\":\"/tutorials/exploring-graphql\",\"description\":\"Using tools such as GraphiQL to explore the capabilities of WPGraphQL\",\"children\":{}},\"override-field-resolvers\":{\"title\":\"Override Field Resolvers\",\"name\":\"override-field-resolvers\",\"type\":\"page\",\"path\":\"/tutorials/override-field-resolvers\",\"description\":\"Learn how to override existing field resolvers to resolve custom data\",\"children\":{}},\"testing-extensions\":{\"title\":\"Testing Extensions\",\"name\":\"testing-extensions\",\"type\":\"page\",\"path\":\"/tutorials/testing-extensions\",\"description\":\"Learn how to write unit tests for code that extends WPGraphQL\",\"children\":{}},\"testing\":{\"title\":\"Testing WPGraphQL\",\"name\":\"testing\",\"type\":\"page\",\"path\":\"/tutorials/testing\",\"description\":\"Learn how to write, run and contribute to unit and integration tests for WPGraphQL\",\"children\":{}},\"graphql-in-php\":{\"title\":\"Using GraphQL in PHP\",\"name\":\"graphql-in-php\",\"type\":\"page\",\"path\":\"/tutorials/graphql-in-php\",\"description\":\"Learn how to use GraphQL queries and mutations in WordPress theme and plugin code without remote HTTP requests\",\"children\":{}}}},\"recipes\":{\"title\":\"Recipes\",\"name\":\"recipes\",\"type\":\"directory\",\"path\":\"/recipes/comments\",\"children\":{\"comments\":{\"title\":\"Comments\",\"name\":\"comments\",\"type\":\"page\",\"path\":\"/recipes/comments\",\"description\":\"Recipes for interacting with WordPress comments using WPGraphQL\",\"children\":{}},\"options\":{\"title\":\"Options\",\"name\":\"options\",\"type\":\"page\",\"path\":\"/recipes/options\",\"description\":\"Recipes for interacting with WordPress options using WPGraphQL\",\"children\":{}},\"plugins\":{\"title\":\"Plugins\",\"name\":\"plugins\",\"type\":\"page\",\"path\":\"/recipes/plugins\",\"description\":\"Recipes for interacting with WordPress Plugins using WPGraphQL\",\"children\":{}},\"posts\":{\"title\":\"Posts\",\"name\":\"posts\",\"type\":\"page\",\"path\":\"/recipes/posts\",\"description\":\"Recipes for interacting with WordPress posts (and supported custom post types) using WPGraphQL\",\"children\":{}},\"terms\":{\"title\":\"Terms\",\"name\":\"terms\",\"type\":\"page\",\"path\":\"/recipes/terms\",\"description\":\"Recipes for interacting with Categories, Tags (and terms of other supported taxonomies) using WPGraphQL\",\"children\":{}},\"themes\":{\"title\":\"Themes\",\"name\":\"themes\",\"type\":\"page\",\"path\":\"/recipes/themes\",\"description\":\"Recipes for interacting with Themes using WPGraphQL\",\"children\":{}},\"users\":{\"title\":\"Users\",\"name\":\"users\",\"type\":\"page\",\"path\":\"/recipes/users\",\"description\":\"Recipes for interacting with WordPress Users using WPGraphQL\",\"children\":{}}}},\"reference\":{\"title\":\"Reference\",\"name\":\"reference\",\"type\":\"directory\",\"path\":\"/reference/actions-filters\",\"children\":{\"actions-filters\":{\"title\":\"Actions & Filters\",\"name\":\"actions-filters\",\"type\":\"page\",\"path\":\"/reference/actions-filters\",\"description\":\"Action & Filter reference for the WPGraphQL Plugin\",\"children\":{}},\"auth\":{\"title\":\"Auth\",\"name\":\"auth\",\"type\":\"page\",\"path\":\"/reference/auth\",\"description\":\"Understand how WPGraphQL deals with Authorization and Authentication\",\"children\":{}},\"deferred-resolvers\":{\"title\":\"Deferred Resolvers\",\"name\":\"deferred-resolvers\",\"type\":\"page\",\"path\":\"/reference/deferred-resolvers\",\"description\":\"Understand how GraphQL utilizes Deferred resolvers to efficiently fetch and resolve data\",\"children\":{}},\"extensions\":{\"title\":\"Extensions\",\"name\":\"extensions\",\"type\":\"page\",\"path\":\"/reference/extensions\",\"description\":\"Learn about WPGraphQL extensions from the community\",\"children\":{}},\"tooling\":{\"title\":\"Tooling\",\"name\":\"tooling\",\"type\":\"page\",\"path\":\"/reference/tooling\",\"description\":\"Learn about tooling for working with GraphQL in general (and WPGraphQL specifically)\",\"children\":{}},\"types-schema\":{\"title\":\"Types and Schema\",\"name\":\"types-schema\",\"type\":\"page\",\"path\":\"/reference/types-schema\",\"description\":\"Learn more about how GraphQL Types and Schema work\",\"children\":{}},\"unit-tests\":{\"title\":\"Unit Tests\",\"name\":\"unit-tests\",\"type\":\"page\",\"path\":\"/reference/unit-tests\",\"description\":\"Learn more about how WPGraphQL unit tests are setup\",\"children\":{}}}},\"faq\":{\"title\":\"Faq\",\"name\":\"faq\",\"type\":\"directory\",\"path\":\"/faq/client\",\"children\":{\"client\":{\"title\":\"Client FAQ\",\"name\":\"client\",\"type\":\"page\",\"path\":\"/faq/client\",\"description\":\"Frequently asked questions about using WPGraphQL in the client\",\"children\":{}},\"contributing\":{\"title\":\"Contributing\",\"name\":\"contributing\",\"type\":\"page\",\"path\":\"/faq/contributing\",\"description\":\"Frequently asked questions about contributing to WPGraphQL\",\"children\":{}},\"extending\":{\"title\":\"Extending\",\"name\":\"extending\",\"type\":\"page\",\"path\":\"/faq/extending\",\"description\":\"Frequently asked questions about extending WPGraphQL\",\"children\":{}},\"faq\":{\"title\":\"FAQ\",\"name\":\"faq\",\"type\":\"page\",\"path\":\"/faq/faq\",\"description\":\"Frequently asked questions about WPGraphQL\",\"children\":{}},\"schema\":{\"title\":\"Schema FAQ\",\"name\":\"schema\",\"type\":\"page\",\"path\":\"/faq/schema\",\"description\":\"Frequently asked questions about the WPGraphQL Schema\",\"children\":{}}}}},\"node\":{\"fileAbsolutePath\":\"/Users/jasonbahl/Sites/wp-graphql-site/src/content/002-tutorials/exploring-graphql.md\",\"id\":\"/Users/jasonbahl/Sites/wp-graphql-site/src/content/002-tutorials/exploring-graphql.md absPath of file >>> MarkdownRemark\",\"shortExcerpt\":\"Exploring WPGraphQL In this Tutorial, we will be exploring GraphQL using GraphiQL. GraphiQL GraphiQL…\",\"excerpt\":\"Exploring WPGraphQL In this Tutorial, we will be exploring GraphQL using GraphiQL. GraphiQL GraphiQL  is the de-facto tool for interacting with a GraphQL Schema. It’s an open source graphical interactive in-browser GraphQL IDE.  It allows users to explore a GraphQL Schema’s documentation, and execute GraphQL queries and mutations and see the response in real time. GraphiQL itself is a React component, so to use it, you need to either implement the React component, or use something that implements it already. GraphiQL Tools / Apps Below is a (non-comprehensive) list of tools that implement GraphiQL that you can use to explore and experiment with your WPGraphQL API. GraphiQL Desktop App :  GraphiQL as an Electron desktop app WPGraphiQL :  WordPress plugin that adds GraphiQL to the WordPress admin dashboard  GraphQL Playground :  Desktop App from the folks at Graph.Cool. GraphQL IDE :  Desktop App that supports multiple endpoint configurations Altair :  Chrome Extension ChromiQL :  Chrome…\",\"html\":\"<h1 id=\\\"exploring-wpgraphql\\\"><a href=\\\"#exploring-wpgraphql\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Exploring WPGraphQL</h1>\\n<p>In this Tutorial, we will be exploring GraphQL using GraphiQL.</p>\\n<h2 id=\\\"graphiql\\\"><a href=\\\"#graphiql\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>GraphiQL</h2>\\n<p><a href=\\\"https://github.com/graphql/graphiql\\\">GraphiQL</a> is the de-facto tool for interacting with a GraphQL Schema. It’s an open source graphical interactive in-browser GraphQL IDE. </p>\\n<p>It allows users to explore a GraphQL Schema’s documentation, and execute GraphQL queries and mutations and see the response in real time.</p>\\n<p>GraphiQL itself is a React component, so to use it, you need to either implement the React component, or use something that implements it already.</p>\\n<h2 id=\\\"graphiql-tools--apps\\\"><a href=\\\"#graphiql-tools--apps\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>GraphiQL Tools / Apps</h2>\\n<p>Below is a (non-comprehensive) list of tools that implement GraphiQL that you can use to explore and experiment with your WPGraphQL API.</p>\\n<ul>\\n<li><strong><a href=\\\"https://github.com/skevy/graphiql-app\\\">GraphiQL Desktop App</a>:</strong> GraphiQL as an Electron desktop app</li>\\n<li><strong><a href=\\\"https://github.com/wp-graphql/wp-graphiql\\\">WPGraphiQL</a>:</strong> WordPress plugin that adds GraphiQL to the WordPress admin dashboard </li>\\n<li><strong><a href=\\\"https://github.com/graphcool/graphql-playground/releases\\\">GraphQL Playground</a>:</strong> Desktop App from the folks at Graph.Cool.</li>\\n<li><strong><a href=\\\"https://github.com/andev-software/graphql-ide\\\">GraphQL IDE</a>:</strong> Desktop App that supports multiple endpoint configurations</li>\\n<li><strong><a href=\\\"https://chrome.google.com/webstore/detail/altair-graphql-client/flnheeellpciglgpaodhkhmapeljopja?hl=en\\\">Altair</a>:</strong> Chrome Extension</li>\\n<li><strong><a href=\\\"https://chrome.google.com/webstore/detail/chromeiql/fkkiamalmpiidkljmicmjfbieiclmeij?hl=en\\\">ChromiQL</a>:</strong> Chrome Extension</li>\\n</ul>\\n<p>!!! info “This Guide References the GraphiQL Desktop App”\\nThroughout this guide, for screenshots, etc we use <a href=\\\"https://github.com/skevy/graphiql-app\\\">GraphiQL Desktop App</a>. Any specific info on using GraphiQL will be referring to that specific App, but should be generally applicable to any of them.\\nFeel free to use the same one we use, explore the others, or even build your own!</p>\\n<h2 id=\\\"configure-graphiql\\\"><a href=\\\"#configure-graphiql\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Configure GraphiQL</h2>\\n<p>Once you have a WordPress install setup with the <a href=\\\"../install-and-activate.md\\\">WPGraphQL plugin installed and activated</a>\\nand the GraphiQL Desktop App (or other GraphiQL tool) <a href=\\\"https://github.com/skevy/graphiql-app#installation\\\">installed</a>,\\nthe first thing you will want to do is point it at your WPGraphQL endpoint.</p>\\n<p>When the app is first opened, you may notice a blank right pane, or an error showing that GraphiQL failed to fetch. </p>\\n<p><img src=\\\"../assets/images/graphiql-01-error-when-opening-app.png\\\" alt=\\\"GraphiQL Error when first opening the app\\\"></p>\\n<p>This is because GraphiQL isn’t pointed to a valid GraphQL endpoint.</p>\\n<h3 id=\\\"point-it-at-your-endpoint\\\"><a href=\\\"#point-it-at-your-endpoint\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Point it at your endpoint</h3>\\n<p>Toward the top of the App is a “GraphQL Endpoint” text field where you can paste in a URL to your WPGraphQL endpoint.</p>\\n<p>I have a local WordPress install running at <code>wpgraphql.dev</code>, so my endpoint is <code>http://wpgraphql.dev/graphql</code></p>\\n<p>When I paste in my WPGraphQL url, the error goes away. This is because the App went and fetched my GraphQL schema and populated the GraphQL Documentation pane.</p>\\n<p><img src=\\\"../assets/images/graphiql-02-paste-url.gif\\\" alt=\\\"GraphiQL Paste in URL\\\"></p>\\n<h2 id=\\\"explore-your-schema-docs\\\"><a href=\\\"#explore-your-schema-docs\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Explore your Schema Docs</h2>\\n<p>At this point, GraphiQL has fetched your WPGraphQL Schema and generated documentation that you can browse. </p>\\n<p>At the top left of GraphiQL, you should see a ”&#x3C; Docs” link.</p>\\n<p>Clicking that expands the Documentation panel.</p>\\n<p><img src=\\\"../assets/images/graphiql-03-open-docs.gif\\\" alt=\\\"GraphiQL Open Docs\\\"></p>\\n<p>!!! note\\nYou can adjust the width of the Documentation panel to your liking by selecting the left border of the panel and dragging and dropping.\\n<br>\\nFrom the Documentation panel, you can see that at the root of the WPGraphQL Schema is <code>query: RootQuery</code> and <code>mutation: RootMutation</code>. </p>\\n<p>These are the root entry points to the WordPress Application Data Graph.</p>\\n<p>You can click into either to explore the capabilities nested below. </p>\\n<p>For example, clicking <code>RooyQuery</code> displays the fields that are available as part of the root. You can scroll through the list to see what’s available. what the description is, what Type will be returned, and what arguments the field accepts.</p>\\n<p><img src=\\\"../assets/images/graphiql-04-explore-root-query.gif\\\" alt=\\\"GraphiQL Explore Root Query\\\"></p>\\n<p>When looking at the GraphQL Docs, it might be overwhelming trying to understand what everything is that you’re seeing. </p>\\n<p>Here’s an annotated breakdown of what is displayed in the Documentation panel as you explore the docs.</p>\\n<p><img src=\\\"../assets/images/graphiql-05-field-annotation.png\\\" alt=\\\"GraphiQL Annotated Docs\\\"></p>\\n<h3 id=\\\"search-the-docs\\\"><a href=\\\"#search-the-docs\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Search the Docs</h3>\\n<p>In addition to clicking to explore the GraphQL Schema Docs, you can also search the documentation. Let’s say you wanted to\\nknow how to use GraphQL to query for pages. You could search “page” in the Search field in the Documentation pane, and\\nyou would see all results in the Schema where “page” was mentioned. This can help understand all the entry points where “pages”\\ncan be queried. </p>\\n<p><img src=\\\"../assets/images/graphiql-06-search-docs.png\\\" alt=\\\"GraphiQL Search Docs\\\"></p>\\n<p>We can see here that there is a “pages” field on the RootQuery. Next, Let’s try to query for pages!</p>\\n<h2 id=\\\"write-some-queries\\\"><a href=\\\"#write-some-queries\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Write Some Queries</h2>\\n<p>We know we can query “pages” on the RootQuery, because we saw it in the docs, but how do we do that?</p>\\n<p>Well, writing GraphQL Queries in GraphiQL is super intuitive. As you start typing, GraphiQL suggests fields that you might\\nbe looking for and will complete them for you if you press Tab on the highlighted suggestion.</p>\\n<p>Let’s write a query to get a list of pages. </p>\\n<p>GraphiQL has some helper text explaining how to write queries. We can select it all and remove it.</p>\\n<p>Then, since <code>pages</code> is a RootQuery field, we can simply start our query with an opening <code>{</code> bracket, then start typing <code>page</code> and we will see the autoselect pop-up.</p>\\n<p>We can arrow-down to select <code>pages</code>, then press <code>tab</code> and it will autocomplete. </p>\\n<p>Then we need to make a Selection on the <code>pages</code> field. We can use the Documentation explorer to see what’s available to query, or\\nwe can just start typing to see what the Typeahead suggest tells us.</p>\\n<p>Once ready, click the Play button to execute the query.</p>\\n<p>Below, you can see using the Typeahead feature to help build a query and see what fields are available. You can also see how GraphiQL shows helpers\\nwhen the syntax is broken by highlighting things red. </p>\\n<p><img src=\\\"../assets/images/graphiql-07-write-first-query.gif\\\" alt=\\\"GraphiQL Write first Query\\\"></p>\\n<h3 id=\\\"queries-to-try\\\"><a href=\\\"#queries-to-try\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Queries to try</h3>\\n<p>Here are some queries to try. Since GraphQL queries are static strings, you can simply copy these and paste them into your GraphiQL explorer.</p>\\n<h4 id=\\\"get-a-list-of-posts\\\"><a href=\\\"#get-a-list-of-posts\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Get a List of Posts</h4>\\n{\\n  posts {\\n    edges {\\n      node {\\n        id\\n        title\\n        date\\n        content\\n      }\\n    }\\n  }\\n}\\n<h4 id=\\\"get-a-list-of-posts-with-author-info\\\"><a href=\\\"#get-a-list-of-posts-with-author-info\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Get a List of Posts with Author info</h4>\\n<p>This is a pretty neat example of the power of GraphQL. Posts and Users are stored in different tables in WordPress and\\ngetting Post Data and User data typically requires multiple queries. </p>\\n<p>You would typically first use <code>WP_Query</code> to get a list of posts, then while looping through the posts, you would get the author data by querying for that.</p>\\n<p>GraphQL drastically simplifies that, allowing you to just declare what fields you want from each post, and what fields you want from each Post’s author. And,\\nbehind the scenes, WPGraphQL is doing some cool stuff to optimize the queries to make sure the fewest possible queries are run\\nto get the needed data. <a href=\\\"../reference/deferred-resolvers.md\\\">Learn More</a></p>\\n{\\n  posts {\\n    edges {\\n      node {\\n        id\\n        title\\n        date\\n        author {\\n          id\\n          name\\n          username\\n          description\\n        }\\n      }\\n    }\\n  }\\n}\\n<h4 id=\\\"get-a-list-of-users\\\"><a href=\\\"#get-a-list-of-users\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Get a List of Users</h4>\\n{\\n  users {\\n    edges {\\n      node {\\n        id\\n        name\\n        username\\n      }\\n    }\\n  }\\n}\\n<h4 id=\\\"get-a-list-of-users-with-their-recent-posts\\\"><a href=\\\"#get-a-list-of-users-with-their-recent-posts\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Get a List of Users with their Recent Posts</h4>\\n<p>We saw earlier how we can query for Author data on posts, but we can also get to posts from the user as well.</p>\\n<p>Here we are going to query for a list of users, then ask for each users posts, and for each post ask for the author. </p>\\n<p>That makes my head spin, but it’s really not <em>that</em> uncommon of a need.</p>\\n<p>Try executing this and see what you get. </p>\\n{\\n  users {\\n    edges {\\n      node {\\n        id\\n        name\\n        username\\n        posts {\\n          edges {\\n            node {\\n              id\\n              title\\n              date\\n              author {\\n                id\\n                name\\n                username\\n                description\\n              }\\n            }\\n          }\\n        }\\n      }\\n    }\\n  }\\n}\\n<p>You should see a list of users, and on each user you should see a list of posts, if that user has any, or empty post.edges if they don’t. Then the posts should have an author field with the same author data as the user node.</p>\\n<p>Pretty neat!</p>\\n<h2 id=\\\"exploring-aliases\\\"><a href=\\\"#exploring-aliases\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Exploring Aliases</h2>\\n<p>GraphQL has a subtle but very powerful feature called Aliasing. You can set aliases on fields as you query, and the fields will\\nbe returned to you using the specified Alias. </p>\\n<p>This really puts a lot of power in the clients hands.</p>\\n<p>Lets try a simple query with Aliases.</p>\\n{\\n  recentPosts: posts {\\n    items: edges {\\n      post: node {\\n        globalId: id\\n        id: postId\\n        articleTitle: title\\n        articleDate: date\\n      }\\n    }\\n  }\\n}\\n<p>Now run that query and see how the fields are returned with the Aliases set as the key in the response. Wow!</p>\\n<h2 id=\\\"exploring-variables\\\"><a href=\\\"#exploring-variables\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Exploring Variables</h2>\\n<p>Variables are a very powerful feature of GraphQL.  </p>\\n<p>!!! warning “Coming Soon”\\nUntil we have time to write more info on this, you can learn more <a href=\\\"http://graphql.org/learn/queries/#variables\\\">here</a></p>\\n<h2 id=\\\"keep-exploring\\\"><a href=\\\"#keep-exploring\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Keep Exploring</h2>\\n<p>At this point, you should be familiar enough with GraphiQL to continue exploring what kind of data you can access.</p>\\n<h2 id=\\\"debugging-requests\\\"><a href=\\\"#debugging-requests\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Debugging Requests</h2>\\n<p>!!! info “Disclaimer”\\nThis section applies particularly to the <a href=\\\"https://github.com/skevy/graphiql-app\\\">GraphiQL Desktop App</a> as it’s an Electron app.</p>\\n<p>Since the GraphiQL Desktop App is an Electron App, it’s built on Chromium, which means we can open up Chrome developer tools <code>Command + Option + I</code></p>\\n<p>Then in Developer tools, navigate to the <code>Network</code> tab.</p>\\n<p>With the <code>Network</code> tab open, execute a GraphQL Query.</p>\\n<p>You can see the requests that are sent and the payloads that are returned. You can explore the headers and the formatting that GraphiQL uses to send requests, etc.</p>\\n<p>Using the Network tab can be helpful for debugging when something goes wrong and no response is rendered in the GraphiQL response pane.</p>\\n<p>!!! warning “More info coming soon”\\nThis section needs more info…</p>\",\"timeToRead\":7,\"frontmatter\":{\"title\":\"Exploring WPGraphQL\",\"description\":\"Using tools such as GraphiQL to explore the capabilities of WPGraphQL\",\"path\":\"tutorials/exploring-graphql\"}},\"next\":{\"id\":\"/Users/jasonbahl/Sites/wp-graphql-site/src/content/002-tutorials/override-field-resolvers.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"title\":\"Override Field Resolvers\",\"description\":\"Learn how to override existing field resolvers to resolve custom data\",\"path\":\"tutorials/override-field-resolvers\"}},\"previous\":{\"id\":\"/Users/jasonbahl/Sites/wp-graphql-site/src/content/002-tutorials/custom-post-types-and-taxonomies.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"title\":\"Custom Post Types and Taxonomies\",\"description\":\"Learn how to add Custom Post Types and Custom Taxonomies to WPGraphQL\",\"path\":\"tutorials/custom-post-types-and-taxonomies\"}}}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---tutorials-exploring-graphql-8669241a4ab090f14ce5.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h1 id=\\\"exploring-wpgraphql\\\"><a href=\\\"#exploring-wpgraphql\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Exploring WPGraphQL</h1>\\n<p>In this Tutorial, we will be exploring GraphQL using GraphiQL.</p>\\n<h2 id=\\\"graphiql\\\"><a href=\\\"#graphiql\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>GraphiQL</h2>\\n<p><a href=\\\"https://github.com/graphql/graphiql\\\">GraphiQL</a> is the de-facto tool for interacting with a GraphQL Schema. It’s an open source graphical interactive in-browser GraphQL IDE. </p>\\n<p>It allows users to explore a GraphQL Schema’s documentation, and execute GraphQL queries and mutations and see the response in real time.</p>\\n<p>GraphiQL itself is a React component, so to use it, you need to either implement the React component, or use something that implements it already.</p>\\n<h2 id=\\\"graphiql-tools--apps\\\"><a href=\\\"#graphiql-tools--apps\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>GraphiQL Tools / Apps</h2>\\n<p>Below is a (non-comprehensive) list of tools that implement GraphiQL that you can use to explore and experiment with your WPGraphQL API.</p>\\n<ul>\\n<li><strong><a href=\\\"https://github.com/skevy/graphiql-app\\\">GraphiQL Desktop App</a>:</strong> GraphiQL as an Electron desktop app</li>\\n<li><strong><a href=\\\"https://github.com/wp-graphql/wp-graphiql\\\">WPGraphiQL</a>:</strong> WordPress plugin that adds GraphiQL to the WordPress admin dashboard </li>\\n<li><strong><a href=\\\"https://github.com/graphcool/graphql-playground/releases\\\">GraphQL Playground</a>:</strong> Desktop App from the folks at Graph.Cool.</li>\\n<li><strong><a href=\\\"https://github.com/andev-software/graphql-ide\\\">GraphQL IDE</a>:</strong> Desktop App that supports multiple endpoint configurations</li>\\n<li><strong><a href=\\\"https://chrome.google.com/webstore/detail/altair-graphql-client/flnheeellpciglgpaodhkhmapeljopja?hl=en\\\">Altair</a>:</strong> Chrome Extension</li>\\n<li><strong><a href=\\\"https://chrome.google.com/webstore/detail/chromeiql/fkkiamalmpiidkljmicmjfbieiclmeij?hl=en\\\">ChromiQL</a>:</strong> Chrome Extension</li>\\n</ul>\\n<p>!!! info “This Guide References the GraphiQL Desktop App”\\nThroughout this guide, for screenshots, etc we use <a href=\\\"https://github.com/skevy/graphiql-app\\\">GraphiQL Desktop App</a>. Any specific info on using GraphiQL will be referring to that specific App, but should be generally applicable to any of them.\\nFeel free to use the same one we use, explore the others, or even build your own!</p>\\n<h2 id=\\\"configure-graphiql\\\"><a href=\\\"#configure-graphiql\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Configure GraphiQL</h2>\\n<p>Once you have a WordPress install setup with the <a href=\\\"../install-and-activate.md\\\">WPGraphQL plugin installed and activated</a>\\nand the GraphiQL Desktop App (or other GraphiQL tool) <a href=\\\"https://github.com/skevy/graphiql-app#installation\\\">installed</a>,\\nthe first thing you will want to do is point it at your WPGraphQL endpoint.</p>\\n<p>When the app is first opened, you may notice a blank right pane, or an error showing that GraphiQL failed to fetch. </p>\\n<p><img src=\\\"../assets/images/graphiql-01-error-when-opening-app.png\\\" alt=\\\"GraphiQL Error when first opening the app\\\"></p>\\n<p>This is because GraphiQL isn’t pointed to a valid GraphQL endpoint.</p>\\n<h3 id=\\\"point-it-at-your-endpoint\\\"><a href=\\\"#point-it-at-your-endpoint\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Point it at your endpoint</h3>\\n<p>Toward the top of the App is a “GraphQL Endpoint” text field where you can paste in a URL to your WPGraphQL endpoint.</p>\\n<p>I have a local WordPress install running at <code>wpgraphql.dev</code>, so my endpoint is <code>http://wpgraphql.dev/graphql</code></p>\\n<p>When I paste in my WPGraphQL url, the error goes away. This is because the App went and fetched my GraphQL schema and populated the GraphQL Documentation pane.</p>\\n<p><img src=\\\"../assets/images/graphiql-02-paste-url.gif\\\" alt=\\\"GraphiQL Paste in URL\\\"></p>\\n<h2 id=\\\"explore-your-schema-docs\\\"><a href=\\\"#explore-your-schema-docs\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Explore your Schema Docs</h2>\\n<p>At this point, GraphiQL has fetched your WPGraphQL Schema and generated documentation that you can browse. </p>\\n<p>At the top left of GraphiQL, you should see a ”&#x3C; Docs” link.</p>\\n<p>Clicking that expands the Documentation panel.</p>\\n<p><img src=\\\"../assets/images/graphiql-03-open-docs.gif\\\" alt=\\\"GraphiQL Open Docs\\\"></p>\\n<p>!!! note\\nYou can adjust the width of the Documentation panel to your liking by selecting the left border of the panel and dragging and dropping.\\n<br>\\nFrom the Documentation panel, you can see that at the root of the WPGraphQL Schema is <code>query: RootQuery</code> and <code>mutation: RootMutation</code>. </p>\\n<p>These are the root entry points to the WordPress Application Data Graph.</p>\\n<p>You can click into either to explore the capabilities nested below. </p>\\n<p>For example, clicking <code>RooyQuery</code> displays the fields that are available as part of the root. You can scroll through the list to see what’s available. what the description is, what Type will be returned, and what arguments the field accepts.</p>\\n<p><img src=\\\"../assets/images/graphiql-04-explore-root-query.gif\\\" alt=\\\"GraphiQL Explore Root Query\\\"></p>\\n<p>When looking at the GraphQL Docs, it might be overwhelming trying to understand what everything is that you’re seeing. </p>\\n<p>Here’s an annotated breakdown of what is displayed in the Documentation panel as you explore the docs.</p>\\n<p><img src=\\\"../assets/images/graphiql-05-field-annotation.png\\\" alt=\\\"GraphiQL Annotated Docs\\\"></p>\\n<h3 id=\\\"search-the-docs\\\"><a href=\\\"#search-the-docs\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Search the Docs</h3>\\n<p>In addition to clicking to explore the GraphQL Schema Docs, you can also search the documentation. Let’s say you wanted to\\nknow how to use GraphQL to query for pages. You could search “page” in the Search field in the Documentation pane, and\\nyou would see all results in the Schema where “page” was mentioned. This can help understand all the entry points where “pages”\\ncan be queried. </p>\\n<p><img src=\\\"../assets/images/graphiql-06-search-docs.png\\\" alt=\\\"GraphiQL Search Docs\\\"></p>\\n<p>We can see here that there is a “pages” field on the RootQuery. Next, Let’s try to query for pages!</p>\\n<h2 id=\\\"write-some-queries\\\"><a href=\\\"#write-some-queries\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Write Some Queries</h2>\\n<p>We know we can query “pages” on the RootQuery, because we saw it in the docs, but how do we do that?</p>\\n<p>Well, writing GraphQL Queries in GraphiQL is super intuitive. As you start typing, GraphiQL suggests fields that you might\\nbe looking for and will complete them for you if you press Tab on the highlighted suggestion.</p>\\n<p>Let’s write a query to get a list of pages. </p>\\n<p>GraphiQL has some helper text explaining how to write queries. We can select it all and remove it.</p>\\n<p>Then, since <code>pages</code> is a RootQuery field, we can simply start our query with an opening <code>{</code> bracket, then start typing <code>page</code> and we will see the autoselect pop-up.</p>\\n<p>We can arrow-down to select <code>pages</code>, then press <code>tab</code> and it will autocomplete. </p>\\n<p>Then we need to make a Selection on the <code>pages</code> field. We can use the Documentation explorer to see what’s available to query, or\\nwe can just start typing to see what the Typeahead suggest tells us.</p>\\n<p>Once ready, click the Play button to execute the query.</p>\\n<p>Below, you can see using the Typeahead feature to help build a query and see what fields are available. You can also see how GraphiQL shows helpers\\nwhen the syntax is broken by highlighting things red. </p>\\n<p><img src=\\\"../assets/images/graphiql-07-write-first-query.gif\\\" alt=\\\"GraphiQL Write first Query\\\"></p>\\n<h3 id=\\\"queries-to-try\\\"><a href=\\\"#queries-to-try\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Queries to try</h3>\\n<p>Here are some queries to try. Since GraphQL queries are static strings, you can simply copy these and paste them into your GraphiQL explorer.</p>\\n<h4 id=\\\"get-a-list-of-posts\\\"><a href=\\\"#get-a-list-of-posts\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Get a List of Posts</h4>\\n{\\n  posts {\\n    edges {\\n      node {\\n        id\\n        title\\n        date\\n        content\\n      }\\n    }\\n  }\\n}\\n<h4 id=\\\"get-a-list-of-posts-with-author-info\\\"><a href=\\\"#get-a-list-of-posts-with-author-info\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Get a List of Posts with Author info</h4>\\n<p>This is a pretty neat example of the power of GraphQL. Posts and Users are stored in different tables in WordPress and\\ngetting Post Data and User data typically requires multiple queries. </p>\\n<p>You would typically first use <code>WP_Query</code> to get a list of posts, then while looping through the posts, you would get the author data by querying for that.</p>\\n<p>GraphQL drastically simplifies that, allowing you to just declare what fields you want from each post, and what fields you want from each Post’s author. And,\\nbehind the scenes, WPGraphQL is doing some cool stuff to optimize the queries to make sure the fewest possible queries are run\\nto get the needed data. <a href=\\\"../reference/deferred-resolvers.md\\\">Learn More</a></p>\\n{\\n  posts {\\n    edges {\\n      node {\\n        id\\n        title\\n        date\\n        author {\\n          id\\n          name\\n          username\\n          description\\n        }\\n      }\\n    }\\n  }\\n}\\n<h4 id=\\\"get-a-list-of-users\\\"><a href=\\\"#get-a-list-of-users\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Get a List of Users</h4>\\n{\\n  users {\\n    edges {\\n      node {\\n        id\\n        name\\n        username\\n      }\\n    }\\n  }\\n}\\n<h4 id=\\\"get-a-list-of-users-with-their-recent-posts\\\"><a href=\\\"#get-a-list-of-users-with-their-recent-posts\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Get a List of Users with their Recent Posts</h4>\\n<p>We saw earlier how we can query for Author data on posts, but we can also get to posts from the user as well.</p>\\n<p>Here we are going to query for a list of users, then ask for each users posts, and for each post ask for the author. </p>\\n<p>That makes my head spin, but it’s really not <em>that</em> uncommon of a need.</p>\\n<p>Try executing this and see what you get. </p>\\n{\\n  users {\\n    edges {\\n      node {\\n        id\\n        name\\n        username\\n        posts {\\n          edges {\\n            node {\\n              id\\n              title\\n              date\\n              author {\\n                id\\n                name\\n                username\\n                description\\n              }\\n            }\\n          }\\n        }\\n      }\\n    }\\n  }\\n}\\n<p>You should see a list of users, and on each user you should see a list of posts, if that user has any, or empty post.edges if they don’t. Then the posts should have an author field with the same author data as the user node.</p>\\n<p>Pretty neat!</p>\\n<h2 id=\\\"exploring-aliases\\\"><a href=\\\"#exploring-aliases\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Exploring Aliases</h2>\\n<p>GraphQL has a subtle but very powerful feature called Aliasing. You can set aliases on fields as you query, and the fields will\\nbe returned to you using the specified Alias. </p>\\n<p>This really puts a lot of power in the clients hands.</p>\\n<p>Lets try a simple query with Aliases.</p>\\n{\\n  recentPosts: posts {\\n    items: edges {\\n      post: node {\\n        globalId: id\\n        id: postId\\n        articleTitle: title\\n        articleDate: date\\n      }\\n    }\\n  }\\n}\\n<p>Now run that query and see how the fields are returned with the Aliases set as the key in the response. Wow!</p>\\n<h2 id=\\\"exploring-variables\\\"><a href=\\\"#exploring-variables\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Exploring Variables</h2>\\n<p>Variables are a very powerful feature of GraphQL.  </p>\\n<p>!!! warning “Coming Soon”\\nUntil we have time to write more info on this, you can learn more <a href=\\\"http://graphql.org/learn/queries/#variables\\\">here</a></p>\\n<h2 id=\\\"keep-exploring\\\"><a href=\\\"#keep-exploring\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Keep Exploring</h2>\\n<p>At this point, you should be familiar enough with GraphiQL to continue exploring what kind of data you can access.</p>\\n<h2 id=\\\"debugging-requests\\\"><a href=\\\"#debugging-requests\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Debugging Requests</h2>\\n<p>!!! info “Disclaimer”\\nThis section applies particularly to the <a href=\\\"https://github.com/skevy/graphiql-app\\\">GraphiQL Desktop App</a> as it’s an Electron app.</p>\\n<p>Since the GraphiQL Desktop App is an Electron App, it’s built on Chromium, which means we can open up Chrome developer tools <code>Command + Option + I</code></p>\\n<p>Then in Developer tools, navigate to the <code>Network</code> tab.</p>\\n<p>With the <code>Network</code> tab open, execute a GraphQL Query.</p>\\n<p>You can see the requests that are sent and the payloads that are returned. You can explore the headers and the formatting that GraphiQL uses to send requests, etc.</p>\\n<p>Using the Network tab can be helpful for debugging when something goes wrong and no response is rendered in the GraphiQL response pane.</p>\\n<p>!!! warning “More info coming soon”\\nThis section needs more info…</p>\",\"frontmatter\":{\"path\":\"tutorials/exploring-graphql\",\"title\":\"Exploring WPGraphQL\"}}},\"pathContext\":{\"path\":\"tutorials/exploring-graphql\",\"nav\":{\"getting-started\":{\"title\":\"Getting-started\",\"name\":\"getting-started\",\"type\":\"directory\",\"path\":\"/getting-started/about\",\"children\":{\"about\":{\"title\":\"About\",\"name\":\"about\",\"type\":\"page\",\"path\":\"/getting-started/about\",\"description\":\"Learn about the WPGraphQL Plugin and how to uses this site\",\"children\":{}},\"install-and-activate\":{\"title\":\"Install and activate\",\"name\":\"install-and-activate\",\"type\":\"page\",\"path\":\"/getting-started/install-and-activate\",\"description\":\"Details on installing and activating the WPGraphQL WordPress plugin\",\"children\":{}},\"contributing\":{\"title\":\"Contributing\",\"name\":\"contributing\",\"type\":\"page\",\"path\":\"/getting-started/contributing\",\"description\":\"Information about contributing to WPGraphQL\",\"children\":{}},\"community-and-support\":{\"title\":\"Community and Support\",\"name\":\"community-and-support\",\"type\":\"page\",\"path\":\"/getting-started/community-and-support\",\"description\":\"Where to find WPGraphQL out in the wild, and how to get support\",\"children\":{}}}},\"tutorials\":{\"title\":\"Tutorials\",\"name\":\"tutorials\",\"type\":\"directory\",\"path\":\"/tutorials/add-fields-to-schema\",\"children\":{\"add-fields-to-schema\":{\"title\":\"Adding fields to the Schema\",\"name\":\"add-fields-to-schema\",\"type\":\"page\",\"path\":\"/tutorials/add-fields-to-schema\",\"description\":\"Learn how to hook into the WPGraphQL Schema to add fields for your custom needs.\",\"children\":{}},\"custom-post-types-and-taxonomies\":{\"title\":\"Custom Post Types and Taxonomies\",\"name\":\"custom-post-types-and-taxonomies\",\"type\":\"page\",\"path\":\"/tutorials/custom-post-types-and-taxonomies\",\"description\":\"Learn how to add Custom Post Types and Custom Taxonomies to WPGraphQL\",\"children\":{}},\"exploring-graphql\":{\"title\":\"Exploring WPGraphQL\",\"name\":\"exploring-graphql\",\"type\":\"page\",\"path\":\"/tutorials/exploring-graphql\",\"description\":\"Using tools such as GraphiQL to explore the capabilities of WPGraphQL\",\"children\":{}},\"override-field-resolvers\":{\"title\":\"Override Field Resolvers\",\"name\":\"override-field-resolvers\",\"type\":\"page\",\"path\":\"/tutorials/override-field-resolvers\",\"description\":\"Learn how to override existing field resolvers to resolve custom data\",\"children\":{}},\"testing-extensions\":{\"title\":\"Testing Extensions\",\"name\":\"testing-extensions\",\"type\":\"page\",\"path\":\"/tutorials/testing-extensions\",\"description\":\"Learn how to write unit tests for code that extends WPGraphQL\",\"children\":{}},\"testing\":{\"title\":\"Testing WPGraphQL\",\"name\":\"testing\",\"type\":\"page\",\"path\":\"/tutorials/testing\",\"description\":\"Learn how to write, run and contribute to unit and integration tests for WPGraphQL\",\"children\":{}},\"graphql-in-php\":{\"title\":\"Using GraphQL in PHP\",\"name\":\"graphql-in-php\",\"type\":\"page\",\"path\":\"/tutorials/graphql-in-php\",\"description\":\"Learn how to use GraphQL queries and mutations in WordPress theme and plugin code without remote HTTP requests\",\"children\":{}}}},\"recipes\":{\"title\":\"Recipes\",\"name\":\"recipes\",\"type\":\"directory\",\"path\":\"/recipes/comments\",\"children\":{\"comments\":{\"title\":\"Comments\",\"name\":\"comments\",\"type\":\"page\",\"path\":\"/recipes/comments\",\"description\":\"Recipes for interacting with WordPress comments using WPGraphQL\",\"children\":{}},\"options\":{\"title\":\"Options\",\"name\":\"options\",\"type\":\"page\",\"path\":\"/recipes/options\",\"description\":\"Recipes for interacting with WordPress options using WPGraphQL\",\"children\":{}},\"plugins\":{\"title\":\"Plugins\",\"name\":\"plugins\",\"type\":\"page\",\"path\":\"/recipes/plugins\",\"description\":\"Recipes for interacting with WordPress Plugins using WPGraphQL\",\"children\":{}},\"posts\":{\"title\":\"Posts\",\"name\":\"posts\",\"type\":\"page\",\"path\":\"/recipes/posts\",\"description\":\"Recipes for interacting with WordPress posts (and supported custom post types) using WPGraphQL\",\"children\":{}},\"terms\":{\"title\":\"Terms\",\"name\":\"terms\",\"type\":\"page\",\"path\":\"/recipes/terms\",\"description\":\"Recipes for interacting with Categories, Tags (and terms of other supported taxonomies) using WPGraphQL\",\"children\":{}},\"themes\":{\"title\":\"Themes\",\"name\":\"themes\",\"type\":\"page\",\"path\":\"/recipes/themes\",\"description\":\"Recipes for interacting with Themes using WPGraphQL\",\"children\":{}},\"users\":{\"title\":\"Users\",\"name\":\"users\",\"type\":\"page\",\"path\":\"/recipes/users\",\"description\":\"Recipes for interacting with WordPress Users using WPGraphQL\",\"children\":{}}}},\"reference\":{\"title\":\"Reference\",\"name\":\"reference\",\"type\":\"directory\",\"path\":\"/reference/actions-filters\",\"children\":{\"actions-filters\":{\"title\":\"Actions & Filters\",\"name\":\"actions-filters\",\"type\":\"page\",\"path\":\"/reference/actions-filters\",\"description\":\"Action & Filter reference for the WPGraphQL Plugin\",\"children\":{}},\"auth\":{\"title\":\"Auth\",\"name\":\"auth\",\"type\":\"page\",\"path\":\"/reference/auth\",\"description\":\"Understand how WPGraphQL deals with Authorization and Authentication\",\"children\":{}},\"deferred-resolvers\":{\"title\":\"Deferred Resolvers\",\"name\":\"deferred-resolvers\",\"type\":\"page\",\"path\":\"/reference/deferred-resolvers\",\"description\":\"Understand how GraphQL utilizes Deferred resolvers to efficiently fetch and resolve data\",\"children\":{}},\"extensions\":{\"title\":\"Extensions\",\"name\":\"extensions\",\"type\":\"page\",\"path\":\"/reference/extensions\",\"description\":\"Learn about WPGraphQL extensions from the community\",\"children\":{}},\"tooling\":{\"title\":\"Tooling\",\"name\":\"tooling\",\"type\":\"page\",\"path\":\"/reference/tooling\",\"description\":\"Learn about tooling for working with GraphQL in general (and WPGraphQL specifically)\",\"children\":{}},\"types-schema\":{\"title\":\"Types and Schema\",\"name\":\"types-schema\",\"type\":\"page\",\"path\":\"/reference/types-schema\",\"description\":\"Learn more about how GraphQL Types and Schema work\",\"children\":{}},\"unit-tests\":{\"title\":\"Unit Tests\",\"name\":\"unit-tests\",\"type\":\"page\",\"path\":\"/reference/unit-tests\",\"description\":\"Learn more about how WPGraphQL unit tests are setup\",\"children\":{}}}},\"faq\":{\"title\":\"Faq\",\"name\":\"faq\",\"type\":\"directory\",\"path\":\"/faq/client\",\"children\":{\"client\":{\"title\":\"Client FAQ\",\"name\":\"client\",\"type\":\"page\",\"path\":\"/faq/client\",\"description\":\"Frequently asked questions about using WPGraphQL in the client\",\"children\":{}},\"contributing\":{\"title\":\"Contributing\",\"name\":\"contributing\",\"type\":\"page\",\"path\":\"/faq/contributing\",\"description\":\"Frequently asked questions about contributing to WPGraphQL\",\"children\":{}},\"extending\":{\"title\":\"Extending\",\"name\":\"extending\",\"type\":\"page\",\"path\":\"/faq/extending\",\"description\":\"Frequently asked questions about extending WPGraphQL\",\"children\":{}},\"faq\":{\"title\":\"FAQ\",\"name\":\"faq\",\"type\":\"page\",\"path\":\"/faq/faq\",\"description\":\"Frequently asked questions about WPGraphQL\",\"children\":{}},\"schema\":{\"title\":\"Schema FAQ\",\"name\":\"schema\",\"type\":\"page\",\"path\":\"/faq/schema\",\"description\":\"Frequently asked questions about the WPGraphQL Schema\",\"children\":{}}}}},\"node\":{\"fileAbsolutePath\":\"/Users/jasonbahl/Sites/wp-graphql-site/src/content/002-tutorials/exploring-graphql.md\",\"id\":\"/Users/jasonbahl/Sites/wp-graphql-site/src/content/002-tutorials/exploring-graphql.md absPath of file >>> MarkdownRemark\",\"shortExcerpt\":\"Exploring WPGraphQL In this Tutorial, we will be exploring GraphQL using GraphiQL. GraphiQL GraphiQL…\",\"excerpt\":\"Exploring WPGraphQL In this Tutorial, we will be exploring GraphQL using GraphiQL. GraphiQL GraphiQL  is the de-facto tool for interacting with a GraphQL Schema. It’s an open source graphical interactive in-browser GraphQL IDE.  It allows users to explore a GraphQL Schema’s documentation, and execute GraphQL queries and mutations and see the response in real time. GraphiQL itself is a React component, so to use it, you need to either implement the React component, or use something that implements it already. GraphiQL Tools / Apps Below is a (non-comprehensive) list of tools that implement GraphiQL that you can use to explore and experiment with your WPGraphQL API. GraphiQL Desktop App :  GraphiQL as an Electron desktop app WPGraphiQL :  WordPress plugin that adds GraphiQL to the WordPress admin dashboard  GraphQL Playground :  Desktop App from the folks at Graph.Cool. GraphQL IDE :  Desktop App that supports multiple endpoint configurations Altair :  Chrome Extension ChromiQL :  Chrome…\",\"html\":\"<h1 id=\\\"exploring-wpgraphql\\\"><a href=\\\"#exploring-wpgraphql\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Exploring WPGraphQL</h1>\\n<p>In this Tutorial, we will be exploring GraphQL using GraphiQL.</p>\\n<h2 id=\\\"graphiql\\\"><a href=\\\"#graphiql\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>GraphiQL</h2>\\n<p><a href=\\\"https://github.com/graphql/graphiql\\\">GraphiQL</a> is the de-facto tool for interacting with a GraphQL Schema. It’s an open source graphical interactive in-browser GraphQL IDE. </p>\\n<p>It allows users to explore a GraphQL Schema’s documentation, and execute GraphQL queries and mutations and see the response in real time.</p>\\n<p>GraphiQL itself is a React component, so to use it, you need to either implement the React component, or use something that implements it already.</p>\\n<h2 id=\\\"graphiql-tools--apps\\\"><a href=\\\"#graphiql-tools--apps\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>GraphiQL Tools / Apps</h2>\\n<p>Below is a (non-comprehensive) list of tools that implement GraphiQL that you can use to explore and experiment with your WPGraphQL API.</p>\\n<ul>\\n<li><strong><a href=\\\"https://github.com/skevy/graphiql-app\\\">GraphiQL Desktop App</a>:</strong> GraphiQL as an Electron desktop app</li>\\n<li><strong><a href=\\\"https://github.com/wp-graphql/wp-graphiql\\\">WPGraphiQL</a>:</strong> WordPress plugin that adds GraphiQL to the WordPress admin dashboard </li>\\n<li><strong><a href=\\\"https://github.com/graphcool/graphql-playground/releases\\\">GraphQL Playground</a>:</strong> Desktop App from the folks at Graph.Cool.</li>\\n<li><strong><a href=\\\"https://github.com/andev-software/graphql-ide\\\">GraphQL IDE</a>:</strong> Desktop App that supports multiple endpoint configurations</li>\\n<li><strong><a href=\\\"https://chrome.google.com/webstore/detail/altair-graphql-client/flnheeellpciglgpaodhkhmapeljopja?hl=en\\\">Altair</a>:</strong> Chrome Extension</li>\\n<li><strong><a href=\\\"https://chrome.google.com/webstore/detail/chromeiql/fkkiamalmpiidkljmicmjfbieiclmeij?hl=en\\\">ChromiQL</a>:</strong> Chrome Extension</li>\\n</ul>\\n<p>!!! info “This Guide References the GraphiQL Desktop App”\\nThroughout this guide, for screenshots, etc we use <a href=\\\"https://github.com/skevy/graphiql-app\\\">GraphiQL Desktop App</a>. Any specific info on using GraphiQL will be referring to that specific App, but should be generally applicable to any of them.\\nFeel free to use the same one we use, explore the others, or even build your own!</p>\\n<h2 id=\\\"configure-graphiql\\\"><a href=\\\"#configure-graphiql\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Configure GraphiQL</h2>\\n<p>Once you have a WordPress install setup with the <a href=\\\"../install-and-activate.md\\\">WPGraphQL plugin installed and activated</a>\\nand the GraphiQL Desktop App (or other GraphiQL tool) <a href=\\\"https://github.com/skevy/graphiql-app#installation\\\">installed</a>,\\nthe first thing you will want to do is point it at your WPGraphQL endpoint.</p>\\n<p>When the app is first opened, you may notice a blank right pane, or an error showing that GraphiQL failed to fetch. </p>\\n<p><img src=\\\"../assets/images/graphiql-01-error-when-opening-app.png\\\" alt=\\\"GraphiQL Error when first opening the app\\\"></p>\\n<p>This is because GraphiQL isn’t pointed to a valid GraphQL endpoint.</p>\\n<h3 id=\\\"point-it-at-your-endpoint\\\"><a href=\\\"#point-it-at-your-endpoint\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Point it at your endpoint</h3>\\n<p>Toward the top of the App is a “GraphQL Endpoint” text field where you can paste in a URL to your WPGraphQL endpoint.</p>\\n<p>I have a local WordPress install running at <code>wpgraphql.dev</code>, so my endpoint is <code>http://wpgraphql.dev/graphql</code></p>\\n<p>When I paste in my WPGraphQL url, the error goes away. This is because the App went and fetched my GraphQL schema and populated the GraphQL Documentation pane.</p>\\n<p><img src=\\\"../assets/images/graphiql-02-paste-url.gif\\\" alt=\\\"GraphiQL Paste in URL\\\"></p>\\n<h2 id=\\\"explore-your-schema-docs\\\"><a href=\\\"#explore-your-schema-docs\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Explore your Schema Docs</h2>\\n<p>At this point, GraphiQL has fetched your WPGraphQL Schema and generated documentation that you can browse. </p>\\n<p>At the top left of GraphiQL, you should see a ”&#x3C; Docs” link.</p>\\n<p>Clicking that expands the Documentation panel.</p>\\n<p><img src=\\\"../assets/images/graphiql-03-open-docs.gif\\\" alt=\\\"GraphiQL Open Docs\\\"></p>\\n<p>!!! note\\nYou can adjust the width of the Documentation panel to your liking by selecting the left border of the panel and dragging and dropping.\\n<br>\\nFrom the Documentation panel, you can see that at the root of the WPGraphQL Schema is <code>query: RootQuery</code> and <code>mutation: RootMutation</code>. </p>\\n<p>These are the root entry points to the WordPress Application Data Graph.</p>\\n<p>You can click into either to explore the capabilities nested below. </p>\\n<p>For example, clicking <code>RooyQuery</code> displays the fields that are available as part of the root. You can scroll through the list to see what’s available. what the description is, what Type will be returned, and what arguments the field accepts.</p>\\n<p><img src=\\\"../assets/images/graphiql-04-explore-root-query.gif\\\" alt=\\\"GraphiQL Explore Root Query\\\"></p>\\n<p>When looking at the GraphQL Docs, it might be overwhelming trying to understand what everything is that you’re seeing. </p>\\n<p>Here’s an annotated breakdown of what is displayed in the Documentation panel as you explore the docs.</p>\\n<p><img src=\\\"../assets/images/graphiql-05-field-annotation.png\\\" alt=\\\"GraphiQL Annotated Docs\\\"></p>\\n<h3 id=\\\"search-the-docs\\\"><a href=\\\"#search-the-docs\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Search the Docs</h3>\\n<p>In addition to clicking to explore the GraphQL Schema Docs, you can also search the documentation. Let’s say you wanted to\\nknow how to use GraphQL to query for pages. You could search “page” in the Search field in the Documentation pane, and\\nyou would see all results in the Schema where “page” was mentioned. This can help understand all the entry points where “pages”\\ncan be queried. </p>\\n<p><img src=\\\"../assets/images/graphiql-06-search-docs.png\\\" alt=\\\"GraphiQL Search Docs\\\"></p>\\n<p>We can see here that there is a “pages” field on the RootQuery. Next, Let’s try to query for pages!</p>\\n<h2 id=\\\"write-some-queries\\\"><a href=\\\"#write-some-queries\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Write Some Queries</h2>\\n<p>We know we can query “pages” on the RootQuery, because we saw it in the docs, but how do we do that?</p>\\n<p>Well, writing GraphQL Queries in GraphiQL is super intuitive. As you start typing, GraphiQL suggests fields that you might\\nbe looking for and will complete them for you if you press Tab on the highlighted suggestion.</p>\\n<p>Let’s write a query to get a list of pages. </p>\\n<p>GraphiQL has some helper text explaining how to write queries. We can select it all and remove it.</p>\\n<p>Then, since <code>pages</code> is a RootQuery field, we can simply start our query with an opening <code>{</code> bracket, then start typing <code>page</code> and we will see the autoselect pop-up.</p>\\n<p>We can arrow-down to select <code>pages</code>, then press <code>tab</code> and it will autocomplete. </p>\\n<p>Then we need to make a Selection on the <code>pages</code> field. We can use the Documentation explorer to see what’s available to query, or\\nwe can just start typing to see what the Typeahead suggest tells us.</p>\\n<p>Once ready, click the Play button to execute the query.</p>\\n<p>Below, you can see using the Typeahead feature to help build a query and see what fields are available. You can also see how GraphiQL shows helpers\\nwhen the syntax is broken by highlighting things red. </p>\\n<p><img src=\\\"../assets/images/graphiql-07-write-first-query.gif\\\" alt=\\\"GraphiQL Write first Query\\\"></p>\\n<h3 id=\\\"queries-to-try\\\"><a href=\\\"#queries-to-try\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Queries to try</h3>\\n<p>Here are some queries to try. Since GraphQL queries are static strings, you can simply copy these and paste them into your GraphiQL explorer.</p>\\n<h4 id=\\\"get-a-list-of-posts\\\"><a href=\\\"#get-a-list-of-posts\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Get a List of Posts</h4>\\n{\\n  posts {\\n    edges {\\n      node {\\n        id\\n        title\\n        date\\n        content\\n      }\\n    }\\n  }\\n}\\n<h4 id=\\\"get-a-list-of-posts-with-author-info\\\"><a href=\\\"#get-a-list-of-posts-with-author-info\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Get a List of Posts with Author info</h4>\\n<p>This is a pretty neat example of the power of GraphQL. Posts and Users are stored in different tables in WordPress and\\ngetting Post Data and User data typically requires multiple queries. </p>\\n<p>You would typically first use <code>WP_Query</code> to get a list of posts, then while looping through the posts, you would get the author data by querying for that.</p>\\n<p>GraphQL drastically simplifies that, allowing you to just declare what fields you want from each post, and what fields you want from each Post’s author. And,\\nbehind the scenes, WPGraphQL is doing some cool stuff to optimize the queries to make sure the fewest possible queries are run\\nto get the needed data. <a href=\\\"../reference/deferred-resolvers.md\\\">Learn More</a></p>\\n{\\n  posts {\\n    edges {\\n      node {\\n        id\\n        title\\n        date\\n        author {\\n          id\\n          name\\n          username\\n          description\\n        }\\n      }\\n    }\\n  }\\n}\\n<h4 id=\\\"get-a-list-of-users\\\"><a href=\\\"#get-a-list-of-users\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Get a List of Users</h4>\\n{\\n  users {\\n    edges {\\n      node {\\n        id\\n        name\\n        username\\n      }\\n    }\\n  }\\n}\\n<h4 id=\\\"get-a-list-of-users-with-their-recent-posts\\\"><a href=\\\"#get-a-list-of-users-with-their-recent-posts\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Get a List of Users with their Recent Posts</h4>\\n<p>We saw earlier how we can query for Author data on posts, but we can also get to posts from the user as well.</p>\\n<p>Here we are going to query for a list of users, then ask for each users posts, and for each post ask for the author. </p>\\n<p>That makes my head spin, but it’s really not <em>that</em> uncommon of a need.</p>\\n<p>Try executing this and see what you get. </p>\\n{\\n  users {\\n    edges {\\n      node {\\n        id\\n        name\\n        username\\n        posts {\\n          edges {\\n            node {\\n              id\\n              title\\n              date\\n              author {\\n                id\\n                name\\n                username\\n                description\\n              }\\n            }\\n          }\\n        }\\n      }\\n    }\\n  }\\n}\\n<p>You should see a list of users, and on each user you should see a list of posts, if that user has any, or empty post.edges if they don’t. Then the posts should have an author field with the same author data as the user node.</p>\\n<p>Pretty neat!</p>\\n<h2 id=\\\"exploring-aliases\\\"><a href=\\\"#exploring-aliases\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Exploring Aliases</h2>\\n<p>GraphQL has a subtle but very powerful feature called Aliasing. You can set aliases on fields as you query, and the fields will\\nbe returned to you using the specified Alias. </p>\\n<p>This really puts a lot of power in the clients hands.</p>\\n<p>Lets try a simple query with Aliases.</p>\\n{\\n  recentPosts: posts {\\n    items: edges {\\n      post: node {\\n        globalId: id\\n        id: postId\\n        articleTitle: title\\n        articleDate: date\\n      }\\n    }\\n  }\\n}\\n<p>Now run that query and see how the fields are returned with the Aliases set as the key in the response. Wow!</p>\\n<h2 id=\\\"exploring-variables\\\"><a href=\\\"#exploring-variables\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Exploring Variables</h2>\\n<p>Variables are a very powerful feature of GraphQL.  </p>\\n<p>!!! warning “Coming Soon”\\nUntil we have time to write more info on this, you can learn more <a href=\\\"http://graphql.org/learn/queries/#variables\\\">here</a></p>\\n<h2 id=\\\"keep-exploring\\\"><a href=\\\"#keep-exploring\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Keep Exploring</h2>\\n<p>At this point, you should be familiar enough with GraphiQL to continue exploring what kind of data you can access.</p>\\n<h2 id=\\\"debugging-requests\\\"><a href=\\\"#debugging-requests\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Debugging Requests</h2>\\n<p>!!! info “Disclaimer”\\nThis section applies particularly to the <a href=\\\"https://github.com/skevy/graphiql-app\\\">GraphiQL Desktop App</a> as it’s an Electron app.</p>\\n<p>Since the GraphiQL Desktop App is an Electron App, it’s built on Chromium, which means we can open up Chrome developer tools <code>Command + Option + I</code></p>\\n<p>Then in Developer tools, navigate to the <code>Network</code> tab.</p>\\n<p>With the <code>Network</code> tab open, execute a GraphQL Query.</p>\\n<p>You can see the requests that are sent and the payloads that are returned. You can explore the headers and the formatting that GraphiQL uses to send requests, etc.</p>\\n<p>Using the Network tab can be helpful for debugging when something goes wrong and no response is rendered in the GraphiQL response pane.</p>\\n<p>!!! warning “More info coming soon”\\nThis section needs more info…</p>\",\"timeToRead\":7,\"frontmatter\":{\"title\":\"Exploring WPGraphQL\",\"description\":\"Using tools such as GraphiQL to explore the capabilities of WPGraphQL\",\"path\":\"tutorials/exploring-graphql\"}},\"next\":{\"id\":\"/Users/jasonbahl/Sites/wp-graphql-site/src/content/002-tutorials/override-field-resolvers.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"title\":\"Override Field Resolvers\",\"description\":\"Learn how to override existing field resolvers to resolve custom data\",\"path\":\"tutorials/override-field-resolvers\"}},\"previous\":{\"id\":\"/Users/jasonbahl/Sites/wp-graphql-site/src/content/002-tutorials/custom-post-types-and-taxonomies.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"title\":\"Custom Post Types and Taxonomies\",\"description\":\"Learn how to add Custom Post Types and Custom Taxonomies to WPGraphQL\",\"path\":\"tutorials/custom-post-types-and-taxonomies\"}}}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/tutorials-exploring-graphql.json\n// module id = 745\n// module chunks = 63746481681937"],"sourceRoot":""}